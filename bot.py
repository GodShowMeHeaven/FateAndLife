import logging
import os
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, CallbackContext
)
from keyboards.main_menu import main_menu_keyboard, horoscope_keyboard
from handlers.horoscope import horoscope_callback
from handlers.natal_chart import natal_chart
from handlers.numerology import numerology
from handlers.tarot import tarot, tarot_callback
from handlers.compatibility import compatibility, compatibility_natal, compatibility_fio
from handlers.fortune import fortune
from handlers.subscription import subscribe, unsubscribe
from handlers.user_profile import set_profile, get_profile
import openai
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º OpenAI API-–∫–ª—é—á
openai.api_key = config.OPENAI_API_KEY

async def back_to_menu_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard)

async def start(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–π –±–æ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_menu_keyboard
    )

async def handle_buttons(update: Update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    text = update.message.text

    menu_actions = {
        "üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø": lambda: update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=horoscope_keyboard),
        "üåå –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞": lambda: update.message.reply_text(
            "üìú –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`/natal_chart –ò–º—è –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –ì–æ—Ä–æ–¥`",
            parse_mode="Markdown"
        ),
        "üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è": lambda: update.message.reply_text(
            "üî¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`/numerology –î–î.–ú–ú.–ì–ì–ì–ì`",
            parse_mode="Markdown"
        ),
        "üé¥ –ö–∞—Ä—Ç—ã –¢–∞—Ä–æ": lambda: tarot(update, context),
        "‚ù§Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å": lambda: update.message.reply_text(
            "üíë –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:\n"
            "1Ô∏è‚É£ –ì–æ—Ä–æ—Å–∫–æ–ø: `/compatibility –û–≤–µ–Ω –¢–µ–ª–µ—Ü`\n"
            "2Ô∏è‚É£ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞: `/compatibility_natal ...`\n"
            "3Ô∏è‚É£ –§–ò–û –∏ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: `/compatibility_fio ...`",
            parse_mode="Markdown"
        )
    }

    if text in menu_actions:
        await menu_actions[text]()
    elif text in ["üí∞ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å–≥–∏", "üçÄ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —É–¥–∞—á—É", "üíû –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "ü©∫ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ"]:
        await fortune(update, context)
    elif text == "üìú –ü–æ—Å–ª–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å":
        await update.message.reply_text("‚ú® –í–∞—à–µ –ø–æ—Å–ª–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å: ... (—Ç—É—Ç –≤—ã–∑–æ–≤ OpenAI)")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
app = Application.builder().token(config.TELEGRAM_TOKEN).build()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(horoscope_callback, pattern="^horoscope_.*$"))
app.add_handler(CallbackQueryHandler(tarot_callback, pattern="^draw_tarot$|^prev_tarot$|^next_tarot$"))
app.add_handler(CallbackQueryHandler(back_to_menu_callback, pattern="^back_to_menu$"))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))

logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
app.run_polling()
