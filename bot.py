import logging
import os
import asyncio
from aiohttp import web
import telegram
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
)
from telegram.ext.filters import BaseFilter
from telegram.helpers import escape_markdown
from telegram_bot_calendar import WMonthTelegramCalendar
from keyboards.main_menu import main_menu_keyboard, predictions_keyboard
from keyboards.inline_buttons import horoscope_keyboard
from handlers.horoscope import horoscope_callback, process_horoscope, period_callback
from handlers.natal_chart import natal_chart, handle_natal_input
from handlers.numerology import numerology, process_numerology
from handlers.tarot import tarot
from handlers.compatibility import compatibility, compatibility_natal, handle_compatibility_input
from handlers.compatibility_fio import compatibility_fio
from handlers.fortune import fortune_callback
from handlers.subscription import subscribe, unsubscribe
from handlers.user_profile import set_profile, get_profile
from handlers.message_of_the_day import message_of_the_day_callback
from utils.calendar import start_calendar, handle_calendar
from utils.button_guard import button_guard
from services.database import init_db

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
required_env_vars = ["TELEGRAM_TOKEN", "WEBHOOK_URL"]
for var in required_env_vars:
    if not os.environ.get(var):
        logger.error(f"{var} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        raise ValueError(f"{var} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
telegram_token = os.environ.get("TELEGRAM_TOKEN")
app = Application.builder().token(telegram_token).build()

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
class NatalFilter(BaseFilter):
    def filter(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        return bool(context.user_data.get("awaiting_natal"))

class CompatibilityFilter(BaseFilter):
    def filter(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        return bool(context.user_data.get("awaiting_compatibility"))

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
async def back_to_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if not query:
        logger.error("–û—à–∏–±–∫–∞: back_to_menu_callback –≤—ã–∑–≤–∞–Ω –±–µ–∑ callback_query.")
        return
    await query.answer()
    if not update.effective_chat:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç effective_chat –≤ update")
        return
    chat_id = update.effective_chat.id
    try:
        await query.message.edit_text("‚è¨ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard)
    except telegram.error.BadRequest as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await context.bot.send_message(chat_id, "‚è¨ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard)

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.effective_chat:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç effective_chat –≤ update")
        return
    await update.message.reply_text(
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–π –±–æ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_menu_keyboard
    )

@button_guard
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.text or not update.effective_chat:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ effective_chat")
        return
    text = update.message.text
    chat_id = update.message.chat_id
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–±—Ä–∞–ª: {text}")
    try:
        if text == "üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø":
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=horoscope_keyboard)
        elif text == "üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è":
            await update.message.reply_text("üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å:")
            context.user_data["awaiting_numerology"] = True
            await start_calendar(update, context)
        elif text == "üåå –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞":
            await update.message.reply_text("üìú –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
            context.user_data["awaiting_natal"] = True
            context.user_data["natal_step"] = "name"
        elif text == "‚ù§Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å":
            await update.message.reply_text("üíë –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:")
            context.user_data["awaiting_compatibility"] = True
            await start_calendar(update, context)
        elif text == "üìú –ü–æ—Å–ª–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å":
            await message_of_the_day_callback(update, context)
        elif text == "üé¥ –ö–∞—Ä—Ç—ã –¢–∞—Ä–æ":
            await tarot(update, context)
        elif text == "üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è":
            await update.message.reply_text("üîÆ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:", reply_markup=predictions_keyboard)
        elif text in ["üí∞ –ù–∞ –¥–µ–Ω—å–≥–∏", "üçÄ –ù–∞ —É–¥–∞—á—É", "üíû –ù–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "ü©∫ –ù–∞ –∑–¥–æ—Ä–æ–≤—å–µ"]:
            await fortune_callback(update, context)
        elif text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
            await update.message.reply_text("‚è¨ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard)
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {text}")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ {text}: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
    if update and update.effective_chat:
        await context.bot.send_message(update.effective_chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
app.add_handler(CommandHandler("start", start_handler))
app.add_handler(CommandHandler("natal_chart", natal_chart))
app.add_handler(CommandHandler("numerology", numerology))
app.add_handler(CommandHandler("tarot", tarot))
app.add_handler(CommandHandler("message_of_the_day", message_of_the_day_callback))
app.add_handler(CommandHandler("compatibility", compatibility))
app.add_handler(CommandHandler("compatibility_natal", compatibility_natal))
app.add_handler(CommandHandler("compatibility_fio", compatibility_fio))
app.add_handler(CommandHandler("subscribe", subscribe))
app.add_handler(CommandHandler("unsubscribe", unsubscribe))
app.add_handler(CommandHandler("set_profile", set_profile))
app.add_handler(CommandHandler("get_profile", get_profile))

app.add_handler(CallbackQueryHandler(back_to_menu_callback, pattern="^back_to_menu$"))
app.add_handler(CallbackQueryHandler(message_of_the_day_callback, pattern="^message_of_the_day$"))
app.add_handler(CallbackQueryHandler(handle_calendar, pattern="^cbcal_"))
app.add_handler(CallbackQueryHandler(horoscope_callback, pattern="^horoscope_.*$"))
app.add_handler(CallbackQueryHandler(period_callback, pattern="^period_.*$"))
app.add_handler(CallbackQueryHandler(fortune_callback, pattern="^fortune_.*$"))

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
app.add_handler(MessageHandler(
    filters.Regex("^(üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø|üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è|üåå –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞|‚ù§Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å|üìú –ü–æ—Å–ª–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å|üé¥ –ö–∞—Ä—Ç—ã –¢–∞—Ä–æ|üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è|üí∞ –ù–∞ –¥–µ–Ω—å–≥–∏|üçÄ –ù–∞ —É–¥–∞—á—É|üíû –ù–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è|ü©∫ –ù–∞ –∑–¥–æ—Ä–æ–≤—å–µ|üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é)$"),
    handle_buttons
))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & NatalFilter(), handle_natal_input))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & CompatibilityFilter(), handle_compatibility_input))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_horoscope))

# Webhook handler
async def webhook(request):
    update = telegram.Update.de_json(await request.json(), app.bot)
    await app.process_update(update)
    return web.Response()

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ webhook-—Ä–µ–∂–∏–º–∞ –±–æ—Ç–∞...")
    loop = asyncio.get_event_loop()
    try:
        await app.initialize()
        await init_db()
        from scheduler import schedule_daily_messages
        loop.create_task(schedule_daily_messages(app))
        webhook_url = f"{os.environ.get('WEBHOOK_URL')}/{os.environ.get('TELEGRAM_TOKEN')}"
        await app.bot.set_webhook(webhook_url)
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        webhook_app = web.Application()
        webhook_app.router.add_post(f"/{os.environ.get('TELEGRAM_TOKEN')}", webhook)
        port = int(os.environ.get("PORT", 10000))
        runner = web.AppRunner(webhook_app)
        await runner.setup()
        site = web.TCPSite(runner, "0.0.0.0", port)
        await site.start()
        logger.info(f"Webhook server started on 0.0.0.0:{port}/{os.environ.get('TELEGRAM_TOKEN')}")
        await asyncio.Event().wait()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())