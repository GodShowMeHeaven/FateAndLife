from telegram import Update
from telegram.ext import ContextTypes
from telegram.helpers import escape_markdown  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from services.compatibility_service import get_compatibility
from utils.validation import validate_date, validate_time, validate_place
from utils.calendar import start_calendar
from keyboards.main_menu import main_menu_keyboard
import logging
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

async def compatibility(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.effective_chat:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç effective_chat –≤ update")
        return
    await update.message.reply_text("üíë –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:")
    context.user_data["awaiting_compatibility"] = True
    context.user_data["compatibility_step"] = "birth_date1"
    context.user_data["last_interaction"] = datetime.now()
    await start_calendar(update, context)

async def compatibility_natal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.effective_chat:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ effective_chat –≤ update")
        return
    if not context.args or len(context.args) < 8:
        await update.message.reply_text(
            escape_markdown("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∏–º—è1 –¥–∞—Ç–∞1 –≤—Ä–µ–º—è1 –º–µ—Å—Ç–æ1 –∏–º—è2 –¥–∞—Ç–∞2 –≤—Ä–µ–º—è2 –º–µ—Å—Ç–æ2", version=2),
            parse_mode="MarkdownV2"
        )
        return

    name1, birth1, time1, place1, name2, birth2, time2, place2 = context.args[:8]
    if not validate_date(birth1) or not validate_time(time1) or not validate_date(birth2) or not validate_time(time2):
        await update.message.reply_text(
            escape_markdown("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ (–ß–ß:–ú–ú).", version=2),
            parse_mode="MarkdownV2"
        )
        return

    try:
        result = await get_compatibility(name1, birth1, time1, place1, name2, birth2, time2, place2)
        await update.message.reply_text(escape_markdown(result, version=2), parse_mode="MarkdownV2")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        await update.message.reply_text(
            escape_markdown("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", version=2),
            parse_mode="MarkdownV2"
        )

async def handle_compatibility_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.text or not update.effective_chat:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ effective_chat –≤ update")
        return
    if "last_interaction" in context.user_data and (datetime.now() - context.user_data["last_interaction"]) > timedelta(minutes=10):
        context.user_data.clear()
        await update.message.reply_text(
            escape_markdown("‚ö†Ô∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", version=2),
            parse_mode="MarkdownV2",
            reply_markup=main_menu_keyboard
        )
        return

    step = context.user_data.get("compatibility_step")
    text = update.message.text
    logger.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –¥–ª—è —à–∞–≥–∞ {step}: {text}")

    if step == "birth_date1":
        if not validate_date(text):
            await update.message.reply_text(
                escape_markdown("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–î–î.–ú–ú.–ì–ì–ì–ì).", version=2),
                parse_mode="MarkdownV2"
            )
            return
        context.user_data["birth_date1"] = text
        context.user_data["compatibility_step"] = "birth_time1"
        context.user_data["last_interaction"] = datetime.now()
        await update.message.reply_text("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ (–ß–ß:–ú–ú):")
    elif step == "birth_time1":
        if not validate_time(text):
            await update.message.reply_text(
                escape_markdown("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–ß–ß:–ú–ú).", version=2),
                parse_mode="MarkdownV2"
            )
            return
        context.user_data["birth_time1"] = text
        context.user_data["compatibility_step"] = "birth_place1"
        context.user_data["last_interaction"] = datetime.now()
        await update.message.reply_text("üìç –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:")
    elif step == "birth_place1":
        if not validate_place(text):
            await update.message.reply_text(
                escape_markdown("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã).", version=2),
                parse_mode="MarkdownV2"
            )
            return
        context.user_data["birth_place1"] = text
        context.user_data["name1"] = context.user_data.get("name1", "–ü–µ—Ä–≤—ã–π —á–µ–ª–æ–≤–µ–∫")
        context.user_data["compatibility_step"] = "birth_date2"
        context.user_data["last_interaction"] = datetime.now()
        await update.message.reply_text("üíë –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:")
        await start_calendar(update, context)
    elif step == "birth_date2":
        if not validate_date(text):
            await update.message.reply_text(
                escape_markdown("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–î–î.–ú–ú.–ì–ì–ì–ì).", version=2),
                parse_mode="MarkdownV2"
            )
            return
        context.user_data["birth_date2"] = text
        context.user_data["compatibility_step"] = "birth_time2"
        context.user_data["last_interaction"] = datetime.now()
        await update.message.reply_text("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ (–ß–ß:–ú–ú):")
    elif step == "birth_time2":
        if not validate_time(text):
            await update.message.reply_text(
                escape_markdown("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–ß–ß:–ú–ú).", version=2),
                parse_mode="MarkdownV2"
            )
            return
        context.user_data["birth_time2"] = text
        context.user_data["compatibility_step"] = "birth_place2"
        context.user_data["last_interaction"] = datetime.now()
        await update.message.reply_text("üìç –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:")
    elif step == "birth_place2":
        if not validate_place(text):
            await update.message.reply_text(
                escape_markdown("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã).", version=2),
                parse_mode="MarkdownV2"
            )
            return
        context.user_data["birth_place2"] = text
        context.user_data["name2"] = context.user_data.get("name2", "–í—Ç–æ—Ä–æ–π —á–µ–ª–æ–≤–µ–∫")
        context.user_data["last_interaction"] = datetime.now()

        try:
            result = await get_compatibility(
                context.user_data["name1"],
                context.user_data["birth_date1"],
                context.user_data["birth_time1"],
                context.user_data["birth_place1"],
                context.user_data["name2"],
                context.user_data["birth_date2"],
                context.user_data["birth_time2"],
                context.user_data["birth_place2"]
            )
            await update.message.reply_text(escape_markdown(result, version=2), parse_mode="MarkdownV2")
            context.user_data.clear()
            await update.message.reply_text("‚è¨ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
            await update.message.reply_text(
                escape_markdown("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", version=2),
                parse_mode="MarkdownV2",
                reply_markup=main_menu_keyboard
            )
            context.user_data.clear()