from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from services.compatibility_service import get_zodiac_compatibility, get_natal_compatibility
from utils.loading_messages import send_processing_message, replace_processing_message
from utils.calendar import start_calendar, handle_calendar
import logging
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2."""
    reserved_chars = r'([_*[\]()~`>#+-=|{}.!])'
    return re.sub(reserved_chars, r'\\\1', text)

async def compatibility(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ –∑–Ω–∞–∫–∞–º –∑–æ–¥–∏–∞–∫–∞."""
    if not update.message or len(context.args) < 2:
        await update.message.reply_text(
            escape_markdown_v2("üíë *–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:*\n"
                              "`/compatibility –û–≤–µ–Ω –¢–µ–ª–µ—Ü`"),
            parse_mode="MarkdownV2"
        )
        return

    sign1, sign2 = context.args[0].capitalize(), context.args[1].capitalize()
    processing_message = await send_processing_message(update, f"üíû –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å {sign1} –∏ {sign2}...", context)

    try:
        compatibility_text = get_zodiac_compatibility(sign1, sign2)

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è MarkdownV2
        sign1_escaped = escape_markdown_v2(sign1)
        sign2_escaped = escape_markdown_v2(sign2)
        compatibility_text_escaped = escape_markdown_v2(compatibility_text)

        formatted_text = (
            f"üíû *–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å {sign1_escaped} –∏ {sign2_escaped}*\n"
            "__________________________\n"
            f"{compatibility_text_escaped}\n"
            "__________________________\n"
            "üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞–Ω–∏–µ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è –≥–∞—Ä–º–æ–Ω–∏–∏!"
        )
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π —Ç–µ–∫—Å—Ç: {formatted_text}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await replace_processing_message(context, processing_message, formatted_text, reply_markup, parse_mode="MarkdownV2")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        error_message = escape_markdown_v2("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await replace_processing_message(context, processing_message, error_message, parse_mode="MarkdownV2")

async def compatibility_natal(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å."""
    chat_id = update.effective_chat.id
    processing_message = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞: –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    if update.message and context.args:  # –í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
        if len(context.args) < 8:
            await update.message.reply_text(
                escape_markdown_v2("üåå *–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ:*\n"
                                  "`/compatibility_natal –ò–º—è1 –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –ì–æ—Ä–æ–¥1 –ò–º—è2 –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –ì–æ—Ä–æ–¥2`"),
                parse_mode="MarkdownV2"
            )
            return

        name1, birth1, time1, place1 = context.args[:4]
        name2, birth2, time2, place2 = context.args[4:]

    else:  # –í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ –º–µ–Ω—é –∏–ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã
        required_keys = ["compat_name1", "compat_birth1", "compat_time1", "compat_place1",
                         "compat_name2", "compat_birth2", "compat_time2", "compat_place2"]
        if all(key in context.user_data for key in required_keys):
            name1 = context.user_data["compat_name1"]
            birth1 = context.user_data["compat_birth1"]
            time1 = context.user_data["compat_time1"]
            place1 = context.user_data["compat_place1"]
            name2 = context.user_data["compat_name2"]
            birth2 = context.user_data["compat_birth2"]
            time2 = context.user_data["compat_time2"]
            place2 = context.user_data["compat_place2"]
        else:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –ø–µ—Ä–≤–æ–π –ø–µ—Ä—Å–æ–Ω—ã
            if not context.user_data.get("compat_name1") and not context.user_data.get("awaiting_compat_name1"):
                await context.bot.send_message(
                    chat_id,
                    escape_markdown_v2("üìú –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–µ—Ä–≤–æ–π –ø–µ—Ä—Å–æ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ê–Ω–Ω–∞'):"),
                    parse_mode="MarkdownV2"
                )
                context.user_data["awaiting_compat_name1"] = True
                context.user_data["awaiting_compatibility"] = True  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
            return  # –ñ–¥—ë–º –≤–≤–æ–¥–∞ —á–µ—Ä–µ–∑ handle_compatibility_input

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ
        processing_message = await send_processing_message(update, f"üîÆ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å {name1} –∏ {name2}...", context)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        compatibility_text = get_natal_compatibility(name1, birth1, time1, place1, name2, birth2, time2, place2)

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è MarkdownV2
        name1_escaped = escape_markdown_v2(name1)
        name2_escaped = escape_markdown_v2(name2)
        birth1_escaped = escape_markdown_v2(birth1)
        time1_escaped = escape_markdown_v2(time1)
        place1_escaped = escape_markdown_v2(place1)
        birth2_escaped = escape_markdown_v2(birth2)
        time2_escaped = escape_markdown_v2(time2)
        place2_escaped = escape_markdown_v2(place2)
        compatibility_text_escaped = escape_markdown_v2(compatibility_text)

        formatted_text = (
            f"üîÆ *–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å {name1_escaped} –∏ {name2_escaped}*\n"
            "__________________________\n"
            f"{name1_escaped}: {birth1_escaped}, {time1_escaped}, {place1_escaped}\n"
            f"{name2_escaped}: {birth2_escaped}, {time2_escaped}, {place2_escaped}\n"
            f"{compatibility_text_escaped}\n"
            "__________________________\n"
            "‚ú® *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—é –¥–ª—è –≥–∞—Ä–º–æ–Ω–∏–∏ –≤ –ø–∞—Ä–µ!"
        )
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π —Ç–µ–∫—Å—Ç: {formatted_text}")

        keyboard = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await replace_processing_message(context, processing_message, formatted_text, reply_markup, parse_mode="MarkdownV2")

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        clear_compatibility_data(context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        error_message = escape_markdown_v2("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        if processing_message:
            await replace_processing_message(context, processing_message, error_message, parse_mode="MarkdownV2")
        else:
            await context.bot.send_message(chat_id, error_message, parse_mode="MarkdownV2")

async def handle_compatibility_input(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
    if not update.message or not update.message.text:
        return

    chat_id = update.effective_chat.id
    text = update.message.text.strip()

    logger.debug(f"handle_compatibility_input –ø–æ–ª—É—á–∏–ª —Ç–µ–∫—Å—Ç: '{text}', context.user_data: {context.user_data}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if not context.user_data.get("awaiting_compatibility"):
        logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞ '{text}' - –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
        return

    try:
        if context.user_data.get("awaiting_compat_name1"):
            context.user_data["compat_name1"] = text
            context.user_data.pop("awaiting_compat_name1")
            # –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
            await context.bot.send_message(
                chat_id,
                escape_markdown_v2("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –ø–µ—Ä—Å–æ–Ω—ã:"),
                parse_mode="MarkdownV2"
            )
            await start_calendar(update, context)

        elif context.user_data.get("awaiting_compat_time1"):
            if not any(char.isdigit() for char in text) or ":" not in text:
                await update.message.reply_text(
                    escape_markdown_v2("‚è∞ –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ß–ß:–ú–ú' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '14:30')."),
                    parse_mode="MarkdownV2"
                )
                return
            context.user_data["compat_time1"] = text
            context.user_data.pop("awaiting_compat_time1")
            await context.bot.send_message(
                chat_id,
                escape_markdown_v2("üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –ø–µ—Ä—Å–æ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú–æ—Å–∫–≤–∞'):"),
                parse_mode="MarkdownV2"
            )
            context.user_data["awaiting_compat_place1"] = True

        elif context.user_data.get("awaiting_compat_place1"):
            context.user_data["compat_place1"] = text
            context.user_data.pop("awaiting_compat_place1")
            await context.bot.send_message(
                chat_id,
                escape_markdown_v2("üìú –£–∫–∞–∂–∏—Ç–µ –∏–º—è –≤—Ç–æ—Ä–æ–π –ø–µ—Ä—Å–æ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ò–≤–∞–Ω'):"),
                parse_mode="MarkdownV2"
            )
            context.user_data["awaiting_compat_name2"] = True

        elif context.user_data.get("awaiting_compat_name2"):
            context.user_data["compat_name2"] = text
            context.user_data.pop("awaiting_compat_name2")
            # –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –≤—Ç–æ—Ä–æ–π –ø–µ—Ä—Å–æ–Ω—ã –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            await context.bot.send_message(
                chat_id,
                escape_markdown_v2("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–π –ø–µ—Ä—Å–æ–Ω—ã:"),
                parse_mode="MarkdownV2"
            )
            await start_calendar(update, context)

        elif context.user_data.get("awaiting_compat_time2"):
            if not any(char.isdigit() for char in text) or ":" not in text:
                await update.message.reply_text(
                    escape_markdown_v2("‚è∞ –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ß–ß:–ú–ú' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '09:15')."),
                    parse_mode="MarkdownV2"
                )
                return
            context.user_data["compat_time2"] = text
            context.user_data.pop("awaiting_compat_time2")
            await context.bot.send_message(
                chat_id,
                escape_markdown_v2("üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–π –ø–µ—Ä—Å–æ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'):"),
                parse_mode="MarkdownV2"
            )
            context.user_data["awaiting_compat_place2"] = True

        elif context.user_data.get("awaiting_compat_place2"):
            context.user_data["compat_place2"] = text
            context.user_data.pop("awaiting_compat_place2")
            # –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á—ë—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            await compatibility_natal(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        await context.bot.send_message(
            chat_id,
            escape_markdown_v2("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /compatibility_natal –∏–ª–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã."),
            parse_mode="MarkdownV2"
        )
        clear_compatibility_data(context)

def clear_compatibility_data(context: CallbackContext) -> None:
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é, –∏–∑ context.user_data."""
    compat_keys = ["selected_date", "compat_name1", "compat_birth1", "compat_time1", "compat_place1",
                   "compat_name2", "compat_birth2", "compat_time2", "compat_place2",
                   "awaiting_compat_name1", "awaiting_compat_time1", "awaiting_compat_place1",
                   "awaiting_compat_name2", "awaiting_compat_time2", "awaiting_compat_place2",
                   "awaiting_compatibility"]
    for key in compat_keys:
        context.user_data.pop(key, None)
    logger.info("–û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏–∑ context.user_data")