import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from services.openai_service import ask_openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

CATEGORIES = {
    "fortune_money": "–¥–µ–Ω—å–≥–∏",
    "fortune_luck": "—É–¥–∞—á–∞",
    "fortune_relationships": "–æ—Ç–Ω–æ—à–µ–Ω–∏—è",
    "fortune_health": "–∑–¥–æ—Ä–æ–≤—å–µ"
}

async def fortune(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /fortune –∏–ª–∏ –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ callback-–∫–Ω–æ–ø–∫–∏.
    –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ —á–µ—Ä–µ–∑ callback, —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ.
    """
    query = update.callback_query  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑–≤–∞–Ω–æ –ª–∏ —á–µ—Ä–µ–∑ callback

    if query:
        await query.answer()
        category_key = query.data  # –ù–∞–ø—Ä–∏–º–µ—Ä, "fortune_money"
    else:
        message = update.message
        if not context.args:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            keyboard = [
                [InlineKeyboardButton("üí∞ –ù–∞ –¥–µ–Ω—å–≥–∏", callback_data="fortune_money")],
                [InlineKeyboardButton("üçÄ –ù–∞ —É–¥–∞—á—É", callback_data="fortune_luck")],
                [InlineKeyboardButton("üíû –ù–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="fortune_relationships")],
                [InlineKeyboardButton("ü©∫ –ù–∞ –∑–¥–æ—Ä–æ–≤—å–µ", callback_data="fortune_health")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await message.reply_text("üîÆ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:", reply_markup=reply_markup)
            return

        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        category_name = context.args[0].lower()
        category_key = next((key for key, value in CATEGORIES.items() if value == category_name), None)

        if not category_key:
            await message.reply_text(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑:\n"
                "`–¥–µ–Ω—å–≥–∏`, `—É–¥–∞—á–∞`, `–æ—Ç–Ω–æ—à–µ–Ω–∏—è`, `–∑–¥–æ—Ä–æ–≤—å–µ`",
                parse_mode="Markdown"
            )
            return

    category = CATEGORIES[category_key]
    logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ç–µ–º—É: {category}")

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç OpenAI
    prediction = ask_openai(f"–°–¥–µ–ª–∞–π —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ç–µ–º—É {category}.")

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if query:
        await query.message.edit_text(f"üîÆ *–í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ç–µ–º—É {category}:*\n\n{prediction}",
                                      parse_mode="Markdown",
                                      reply_markup=reply_markup)
    else:
        await message.reply_text(f"üîÆ *–í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ç–µ–º—É {category}:*\n\n{prediction}",
                                 parse_mode="Markdown",
                                 reply_markup=reply_markup)

async def fortune_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç inline-–∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π."""
    query = update.callback_query
    if not query:
        logger.error("–û—à–∏–±–∫–∞: fortune_callback –≤—ã–∑–≤–∞–Ω –Ω–µ —á–µ—Ä–µ–∑ callback_query.")
        return

    await fortune(update, context)
