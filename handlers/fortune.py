import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup  # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã
from telegram.ext import CallbackContext
from services.openai_service import ask_openai  # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
CATEGORIES = {
    "–¥–µ–Ω—å–≥–∏": "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ",
    "—É–¥–∞—á–∞": "–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É–¥–∞—á–∏",
    "–æ—Ç–Ω–æ—à–µ–Ω–∏—è": "–ª—é–±–æ–≤–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ",
    "–∑–¥–æ—Ä–æ–≤—å–µ": "–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def fortune(update: Update, context: CallbackContext) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–º–æ—â—å—é OpenAI API"""
    query = update.callback_query
    chat_id = query.message.chat_id if query else update.message.chat_id

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if query:
        category = query.data.replace("fortune_", "")  # –£–±–∏—Ä–∞–µ–º "fortune_" –∏–∑ callback_data
    elif context.args:
        category = context.args[0].lower()
    else:
        await update.message.reply_text(
            "üîÆ *–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:*\n"
            "`/fortune –¥–µ–Ω—å–≥–∏`  `/fortune —É–¥–∞—á–∞`  `/fortune –æ—Ç–Ω–æ—à–µ–Ω–∏—è`  `/fortune –∑–¥–æ—Ä–æ–≤—å–µ`",
            parse_mode="Markdown"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ø—É—Å—Ç–∏–º–æ–π
    if category not in CATEGORIES:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑:\n"
            "`–¥–µ–Ω—å–≥–∏`, `—É–¥–∞—á–∞`, `–æ—Ç–Ω–æ—à–µ–Ω–∏—è`, `–∑–¥–æ—Ä–æ–≤—å–µ`",
            parse_mode="Markdown"
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI API
    prompt = (
        f"–°–æ–∑–¥–∞–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ç–µ–º—É {CATEGORIES[category]}. "
        "–ò—Å–ø–æ–ª—å–∑—É–π —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–µ –æ–±—Ä–∞–∑—ã, –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–∏–ª–∏—Å—Ç–∏–∫—É –∏ –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã."
    )

    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É OpenAI API
        fortune_text = ask_openai(prompt)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if query:
            await query.answer()
            await query.message.reply_text(f"üîÆ *–í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:*\n\n{fortune_text}",
                                           parse_mode="Markdown", reply_markup=reply_markup)
        else:
            await update.message.reply_text(f"üîÆ *–í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:*\n\n{fortune_text}",
                                            parse_mode="Markdown", reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
