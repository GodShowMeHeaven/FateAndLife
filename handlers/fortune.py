import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from services.openai_service import ask_openai  # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI API

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
CATEGORIES = {
    "fortune_money": "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ",
    "fortune_luck": "–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É–¥–∞—á–∏",
    "fortune_relationships": "–ª—é–±–æ–≤–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ",
    "fortune_health": "–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def fortune_callback(update: Update, context: CallbackContext) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É)"""
    query = update.callback_query
    chat_id = query.message.chat_id

    category_key = query.data  # –ë–µ—Ä–µ–º callback_data –∏–∑ –∫–Ω–æ–ø–∫–∏

    if category_key not in CATEGORIES:
        logger.error(f"–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {category_key}")
        await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI API
    prompt = (
        f"–°–æ–∑–¥–∞–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ç–µ–º—É {CATEGORIES[category_key]}. "
        "–ò—Å–ø–æ–ª—å–∑—É–π —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–µ –æ–±—Ä–∞–∑—ã, –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–∏–ª–∏—Å—Ç–∏–∫—É –∏ –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã."
    )

    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É OpenAI API
        fortune_text = ask_openai(prompt)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await query.answer()
        await query.message.reply_text(f"üîÆ *–í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:*\n\n{fortune_text}",
                                       parse_mode="Markdown", reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
        await query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def fortune_command(update: Update, context: CallbackContext) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã /fortune <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>"""
    if not context.args:
        await update.message.reply_text(
            "üîÆ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:*\n"
            "üí∞ `/fortune –¥–µ–Ω—å–≥–∏`  üçÄ `/fortune —É–¥–∞—á–∞`  üíû `/fortune –æ—Ç–Ω–æ—à–µ–Ω–∏—è`  üè• `/fortune –∑–¥–æ—Ä–æ–≤—å–µ`",
            parse_mode="Markdown"
        )
        return

    category_name = context.args[0].lower()
    category_key = f"fortune_{category_name}"

    if category_key not in CATEGORIES:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑:\n"
            "`/fortune –¥–µ–Ω—å–≥–∏`, `/fortune —É–¥–∞—á–∞`, `/fortune –æ—Ç–Ω–æ—à–µ–Ω–∏—è`, `/fortune –∑–¥–æ—Ä–æ–≤—å–µ`",
            parse_mode="Markdown"
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI API
    prompt = (
        f"–°–æ–∑–¥–∞–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ç–µ–º—É {CATEGORIES[category_key]}. "
        "–ò—Å–ø–æ–ª—å–∑—É–π —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–µ –æ–±—Ä–∞–∑—ã, –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–∏–ª–∏—Å—Ç–∏–∫—É –∏ –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã."
    )

    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É OpenAI API
        fortune_text = ask_openai(prompt)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(f"üîÆ *–í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:*\n\n{fortune_text}",
                                        parse_mode="Markdown", reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
