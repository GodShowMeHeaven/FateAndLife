import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from services.openai_service import ask_openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

CATEGORIES = {
    "fortune_money": "–¥–µ–Ω—å–≥–∏",
    "fortune_luck": "—É–¥–∞—á–∞",
    "fortune_relationships": "–æ—Ç–Ω–æ—à–µ–Ω–∏—è",
    "fortune_health": "–∑–¥–æ—Ä–æ–≤—å–µ"
}

async def fortune_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /fortune —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not context.args:
        await update.message.reply_text(
            "üîÆ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:*\n"
            "`/fortune –¥–µ–Ω—å–≥–∏`, `/fortune —É–¥–∞—á–∞`, `/fortune –æ—Ç–Ω–æ—à–µ–Ω–∏—è`, `/fortune –∑–¥–æ—Ä–æ–≤—å–µ`",
            parse_mode="Markdown"
        )
        return

    category = context.args[0].lower()
    if category not in CATEGORIES.values():
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑:\n"
            "`–¥–µ–Ω—å–≥–∏`, `—É–¥–∞—á–∞`, `–æ—Ç–Ω–æ—à–µ–Ω–∏—è`, `–∑–¥–æ—Ä–æ–≤—å–µ`",
            parse_mode="Markdown"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç OpenAI
    prediction = ask_openai(f"–°–¥–µ–ª–∞–π —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ç–µ–º—É {category}.")
    
    await update.message.reply_text(f"üîÆ *–í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ç–µ–º—É {category}:*\n\n{prediction}", parse_mode="Markdown")

async def fortune_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (callback_query)"""
    query = update.callback_query

    if query is None:  # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ update –≤—ã–∑–≤–∞–Ω —á–µ—Ä–µ–∑ callback
        logger.error("–û—à–∏–±–∫–∞: fortune_callback –≤—ã–∑–≤–∞–Ω –Ω–µ —á–µ—Ä–µ–∑ callback_query.")
        return

    await query.answer()  # ‚úÖ –¢–µ–ø–µ—Ä—å `.answer()` –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ query –Ω–µ None

    category_key = query.data  # –ù–∞–ø—Ä–∏–º–µ—Ä, "fortune_money"
    
    if category_key not in CATEGORIES:
        await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞! –í—ã–±—Ä–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.")
        return

    category = CATEGORIES[category_key]

    logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ç–µ–º—É: {category}")

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç OpenAI
    prediction = ask_openai(f"–°–¥–µ–ª–∞–π —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ç–µ–º—É {category}.")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text(f"üîÆ *–í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ç–µ–º—É {category}:*\n\n{prediction}", 
                                   parse_mode="Markdown",
                                   reply_markup=reply_markup)
