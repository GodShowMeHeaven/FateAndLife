import logging
import re  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç re –¥–ª—è escape_markdown_v2
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from services.openai_service import ask_openai
from utils.loading_messages import send_processing_message, replace_processing_message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

CATEGORIES = {
    "fortune_money": "–¥–µ–Ω—å–≥–∏",
    "fortune_luck": "—É–¥–∞—á–∞",
    "fortune_relationships": "–æ—Ç–Ω–æ—à–µ–Ω–∏—è",
    "fortune_health": "–∑–¥–æ—Ä–æ–≤—å–µ",
    "üí∞ –ù–∞ –¥–µ–Ω—å–≥–∏": "–¥–µ–Ω—å–≥–∏",
    "üçÄ –ù–∞ —É–¥–∞—á—É": "—É–¥–∞—á–∞",
    "üíû –ù–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è": "–æ—Ç–Ω–æ—à–µ–Ω–∏—è",
    "ü©∫ –ù–∞ –∑–¥–æ—Ä–æ–≤—å–µ": "–∑–¥–æ—Ä–æ–≤—å–µ"
}

def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2."""
    reserved_chars = r'([_*[\]()~`>#+-=|{}.!])'
    return re.sub(reserved_chars, r'\\\1', text)

async def fortune_callback(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç inline-–∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã.
    """
    query = update.callback_query
    chat_id = update.effective_chat.id
    processing_message = None

    if query:
        await query.answer()
        category = CATEGORIES.get(query.data, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    else:
        text = update.message.text
        category = CATEGORIES.get(text, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    if category == "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {text if not query else query.data}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.")
        return

    logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ç–µ–º—É: {category}")

    try:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        processing_text = escape_markdown_v2(f"üîÆ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ç–µ–º—É {category}...")
        processing_message = await context.bot.send_message(chat_id, processing_text, parse_mode="MarkdownV2")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç OpenAI
        prediction = await ask_openai(f"–°–¥–µ–ª–∞–π —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ç–µ–º—É {category}.")
        logger.debug(f"–¢–µ–∫—Å—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç OpenAI: {prediction[:500]}...")

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        category_escaped = escape_markdown_v2(category)
        prediction_escaped = escape_markdown_v2(prediction)
        formatted_text = f"üîÆ *–í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞  {category_escaped}:*\n\n{prediction_escaped}"
        logger.debug(f"–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {formatted_text[:500]}...")

        keyboard = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await replace_processing_message(context, processing_message, formatted_text, reply_markup, parse_mode="MarkdownV2")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è {category}: {e}")
        error_message = escape_markdown_v2("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        if processing_message:
            await replace_processing_message(context, processing_message, error_message, parse_mode="MarkdownV2")
        else:
            await context.bot.send_message(chat_id, error_message, parse_mode="MarkdownV2")