import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from services.openai_service import ask_openai
from utils.loading_messages import send_processing_message, replace_processing_message  # ‚úÖ –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∑–∞–≥—Ä—É–∑–∫–∏

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def message_of_the_day_callback(update: Update, context: CallbackContext) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é OpenAI API"""
    query = update.callback_query if update.callback_query else None
    chat_id = query.message.chat_id if query else update.effective_chat.id
    processing_message = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

    prompt = (
        "–°–æ–∑–¥–∞–π –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏ —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–º–∏ –æ–±—Ä–∞–∑–∞–º–∏. "
        "–ò—Å–ø–æ–ª—å–∑—É–π —è–∑—ã–∫, –∫–æ—Ç–æ—Ä—ã–π –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –∏ –ø—Ä–æ–±—É–∂–¥–∞–µ—Ç –∏–Ω—Ç—É–∏—Ü–∏—é. "
        "–î–æ–±–∞–≤—å –¥—Ä–µ–≤–Ω—é—é –º—É–¥—Ä–æ—Å—Ç—å, –º–µ—Ç–∞—Ñ–æ—Ä—ã –ø—Ä–∏—Ä–æ–¥—ã, —ç–ª–µ–º–µ–Ω—Ç—ã –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ –∏–ª–∏ –∫–∞—Ä—Ç –¢–∞—Ä–æ. "
        "–ü—Ä–µ–¥–ª–æ–∂–∏ —Å–æ–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —á–µ–ª–æ–≤–µ–∫—É –Ω–∞–π—Ç–∏ –≥–∞—Ä–º–æ–Ω–∏—é, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å. "
        "–ü–æ—Å–ª–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∑–≤—É—á–∞—Ç—å –∫–∞–∫ –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ –∏–ª–∏ —Ç–∞–π–Ω–æ–µ –∑–Ω–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ª–∏—á–Ω–æ –∫ —á–∏—Ç–∞—é—â–µ–º—É. "
        "–ò–∑–±–µ–≥–∞–π –∫–ª–∏—à–µ –∏ –¥–µ–ª–∞–π –∫–∞–∂–¥–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è."
    )

    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ
        processing_message = await context.bot.send_message(chat_id, "‚ú® –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—à–µ –ø–æ—Å–ª–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å...")
        
        message_text = ask_openai(prompt)  # ‚ùå –£–±—Ä–∞–ª–∏ `await`, —Ç–∞–∫ –∫–∞–∫ `ask_openai` ‚Äì —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è

        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await replace_processing_message(context, processing_message, f"‚ú® *–ü–æ—Å–ª–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å* ‚ú®\n\n{message_text}", reply_markup)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–∞–Ω–∏—è: {e}")
        
        if processing_message:
            await replace_processing_message(context, processing_message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await context.bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
