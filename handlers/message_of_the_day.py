from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from telegram.helpers import escape_markdown  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from services.openai_service import ask_openai
from keyboards.main_menu import main_menu_keyboard
import logging

logger = logging.getLogger(__name__)

async def message_of_the_day_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.effective_chat:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç effective_chat –≤ update")
        return
    query = update.callback_query
    try:
        prompt = "–î–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å –≤ —Å—Ç–∏–ª–µ —ç–∑–æ—Ç–µ—Ä–∏–∫–∏, –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 100 —Å–ª–æ–≤."
        message_text = await ask_openai(prompt)
        message_text = message_text[:4000]
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu"),
             InlineKeyboardButton("üîÑ –ù–æ–≤–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ", callback_data="message_of_the_day")]
        ])
        if query:
            await query.answer()
            await query.message.edit_text(
                f"üìú –ü–æ—Å–ª–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å:\n{message_text}")
        else:
            await update.message.reply_text(
                f"üìú –ü–æ—Å–ª–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å:\n{message_text}"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–∞–Ω–∏—è: {e}")
        text = escape_markdown("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", version=2)
        if query:
            await query.answer()
            await query.message.edit_text(text, parse_mode="MarkdownV2", reply_markup=main_menu_keyboard)
        else:
            await update.message.reply_text(text, parse_mode="MarkdownV2", reply_markup=main_menu_keyboard)