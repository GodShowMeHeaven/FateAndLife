from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from services.natal_chart_service import get_natal_chart
from utils.loading_messages import send_processing_message, replace_processing_message
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def natal_chart(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã: —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å."""
    chat_id = update.effective_chat.id
    processing_message = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞: –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    if update.message and context.args:  # –í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
        if len(context.args) < 4:
            await update.message.reply_text(
                "üìú *–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:*\n"
                "`/natal_chart –ò–º—è –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –ì–æ—Ä–æ–¥`",
                parse_mode="Markdown"
            )
            return

        name = context.args[0]
        birth_date = context.args[1]
        birth_time = context.args[2]
        birth_place = " ".join(context.args[3:])

    elif context.user_data.get("selected_date"):  # –í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        birth_date = context.user_data["selected_date"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ user_data
        if not context.user_data.get("natal_name"):
            await context.bot.send_message(
                chat_id,
                "üìú –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ê–Ω–Ω–∞'):",
            )
            context.user_data["awaiting_natal_name"] = True
            return

        if not context.user_data.get("natal_time"):
            await context.bot.send_message(
                chat_id,
                "‚è∞ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '14:30'):",
            )
            context.user_data["awaiting_natal_time"] = True
            return

        if not context.user_data.get("natal_place"):
            await context.bot.send_message(
                chat_id,
                "üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú–æ—Å–∫–≤–∞'):",
            )
            context.user_data["awaiting_natal_place"] = True
            return

        # –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã
        name = context.user_data["natal_name"]
        birth_time = context.user_data["natal_time"]
        birth_place = context.user_data["natal_place"]

    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–∑–æ–≤: –Ω–∏ –∫–æ–º–∞–Ω–¥—ã, –Ω–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        logger.warning("‚ö†Ô∏è natal_chart –≤—ã–∑–≤–∞–Ω –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
        await context.bot.send_message(
            chat_id,
            "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/natal_chart –ò–º—è –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –ì–æ—Ä–æ–¥` –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
            parse_mode="Markdown"
        )
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ
        if update.message:
            processing_message = await send_processing_message(update, f"üåå –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—à—É –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è {name}...")
        else:
            processing_message = await context.bot.send_message(chat_id, f"üåå –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—à—É –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è {name}...")

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É
        natal_chart_text = get_natal_chart(name, birth_date, birth_time, birth_place)

        formatted_chart = (
            f"üåå *–ê–Ω–∞–ª–∏–∑ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è {name}*\n"
            "__________________________\n"
            f"{natal_chart_text}\n"
            "__________________________\n"
            "‚ú® *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞–Ω–∏—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è!"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await replace_processing_message(context, processing_message, formatted_chart, reply_markup)

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        context.user_data.pop("natal_name", None)
        context.user_data.pop("natal_time", None)
        context.user_data.pop("natal_place", None)
        context.user_data.pop("selected_date", None)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã: {e}")
        error_message = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if processing_message:
            await replace_processing_message(context, processing_message, error_message)
        else:
            await context.bot.send_message(chat_id, error_message, parse_mode="Markdown")

async def handle_natal_input(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–º–µ–Ω–∏, –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è."""
    if not update.message or not update.message.text:
        return

    chat_id = update.effective_chat.id
    text = update.message.text.strip()

    if context.user_data.get("awaiting_natal_name"):
        context.user_data["natal_name"] = text
        context.user_data.pop("awaiting_natal_name")
        await context.bot.send_message(chat_id, "‚è∞ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '14:30'):")
        context.user_data["awaiting_natal_time"] = True

    elif context.user_data.get("awaiting_natal_time"):
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ (–ß–ß:–ú–ú)
        if not any(char.isdigit() for char in text) or ":" not in text:
            await update.message.reply_text("‚è∞ –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ß–ß:–ú–ú' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '14:30').")
            return
        context.user_data["natal_time"] = text
        context.user_data.pop("awaiting_natal_time")
        await context.bot.send_message(chat_id, "üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú–æ—Å–∫–≤–∞'):")
        context.user_data["awaiting_natal_place"] = True

    elif context.user_data.get("awaiting_natal_place"):
        context.user_data["natal_place"] = text
        context.user_data.pop("awaiting_natal_place")
        # –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º natal_chart
        await natal_chart(update, context)