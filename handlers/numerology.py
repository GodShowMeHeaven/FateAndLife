import logging
import re
from telegram import Update
from telegram.ext import CallbackContext
from datetime import datetime
from services.numerology_service import calculate_life_path_number
from openai import OpenAI
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º OpenAI API-–∫–ª—é—á
client = OpenAI(api_key=config.OPENAI_API_KEY)

def validate_date(birth_date: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"""
    return bool(re.match(r"^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.\d{4}$", birth_date))

def get_numerology_interpretation(life_path_number: int) -> str:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —á–∏—Å–ª–∞ —Å—É–¥—å–±—ã —É OpenAI API.
    """
    prompt = f"""
    –ù–∞–ø–∏—à–∏ —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ —Å—É–¥—å–±—ã {life_path_number}.
    –û–ø–∏—à–∏ –∫–ª—é—á–µ–≤—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ª–∏—á–Ω–æ—Å—Ç–∏, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª —ç—Ç–æ–≥–æ —á–∏—Å–ª–∞.
    –î–æ–±–∞–≤—å –º–∏—Å—Ç–∏—á–µ—Å–∫—É—é —Å–∏–º–≤–æ–ª–∏–∫—É –∏ —Å–æ–≤–µ—Ç—ã –ø–æ –≥–∞—Ä–º–æ–Ω–∏–∑–∞—Ü–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏."""

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –≤ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏ –∏ —ç–∑–æ—Ç–µ—Ä–∏–∫–µ."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7
        )

        interpretation = response.choices[0].message.content.strip()
        logger.info(f"–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —á–∏—Å–ª–∞ {life_path_number}: {interpretation[:50]}...")
        return interpretation

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API: {e}")
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —á–∏—Å–ª–∞ —Å—É–¥—å–±—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def numerology(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /numerology –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç —á–∏—Å–ª–æ —Å—É–¥—å–±—ã"""
    if not context.args:
        await update.message.reply_text(
            "üî¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "*/numerology –î–î.–ú–ú.–ì–ì–ì–ì*",
            parse_mode="Markdown"
        )
        return

    birth_date = context.args[0].strip()

    if not validate_date(birth_date):
        await update.message.reply_text(
            "‚ö†Ô∏è *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!* –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/numerology 12.05.1990`",
            parse_mode="Markdown"
        )
        return

    try:
        datetime.strptime(birth_date, "%d.%m.%Y")
        life_path_number = calculate_life_path_number(birth_date)

        # ‚úÖ –£–±—Ä–∞–ª–∏ `await`, —Ç–∞–∫ –∫–∞–∫ `get_numerology_interpretation()` —Ç–µ–ø–µ—Ä—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        interpretation = get_numerology_interpretation(life_path_number)

        numerology_text = (
            f"üî¢ **–í–∞—à–µ —á–∏—Å–ª–æ —Å—É–¥—å–±—ã: {life_path_number}**\n\n"
            f"‚ú® *–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:* {interpretation}\n\n"
            "üîÆ –ß–∏—Å–ª–æ —Å—É–¥—å–±—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∞—à—É –≥–ª–∞–≤–Ω—É—é –∂–∏–∑–Ω–µ–Ω–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ!"
        )

        await update.message.reply_text(numerology_text, parse_mode="Markdown")

    except ValueError:
        await update.message.reply_text(
            "‚ö†Ô∏è *–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞!* –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/numerology 12.05.1990`",
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /numerology: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="Markdown"
        )
