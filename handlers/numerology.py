import logging
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from services.numerology_service import calculate_life_path_number
from services.openai_service import ask_openai
from utils.button_guard import button_guard
from utils.loading_messages import send_processing_message, replace_processing_message
from utils.calendar import start_calendar

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def validate_date(birth_date: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"""
    return bool(re.match(r"^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.\d{4}$", birth_date))

@button_guard
async def numerology(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /numerology –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è."""
    await start_calendar(update, context)

async def process_numerology(update: Update, context: CallbackContext, birth_date: str) -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—á–µ—Ç –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    processing_message = await send_processing_message(update, "üî¢ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—à –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç...", context)

    try:
        life_path_number = calculate_life_path_number(birth_date)
        interpretation = await ask_openai(
            f"""
            –ù–∞–ø–∏—à–∏ —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ —Å—É–¥—å–±—ã {life_path_number}.
            –û–ø–∏—à–∏ –∫–ª—é—á–µ–≤—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ª–∏—á–Ω–æ—Å—Ç–∏, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª —ç—Ç–æ–≥–æ —á–∏—Å–ª–∞.
            –î–æ–±–∞–≤—å –º–∏—Å—Ç–∏—á–µ—Å–∫—É—é —Å–∏–º–≤–æ–ª–∏–∫—É –∏ —Å–æ–≤–µ—Ç—ã –ø–æ –≥–∞—Ä–º–æ–Ω–∏–∑–∞—Ü–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏.
            """
        )

        numerology_text = (
            f"üî¢ **–í–∞—à–µ —á–∏—Å–ª–æ —Å—É–¥—å–±—ã: {life_path_number}**\n\n"
            f"‚ú® *–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:* {interpretation}\n\n"
            "üîÆ –ß–∏—Å–ª–æ —Å—É–¥—å–±—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∞—à—É –≥–ª–∞–≤–Ω—É—é –∂–∏–∑–Ω–µ–Ω–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ!"
        )

        keyboard = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await replace_processing_message(context, processing_message, numerology_text, reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º —Ä–∞—Å—á–µ—Ç–µ: {e}")
        await replace_processing_message(context, processing_message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")