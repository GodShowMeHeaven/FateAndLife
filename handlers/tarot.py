import logging
import asyncio
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from services.tarot_service import get_tarot_interpretation, generate_tarot_image
from services.database import save_tarot_reading
from utils.loading_messages import send_processing_message, replace_processing_message

logging.basicConfig(level=logging.DEBUG)  # –í–∫–ª—é—á–∞–µ–º DEBUG –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
logger = logging.getLogger(__name__)

def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2."""
    reserved_chars = r'([_*[\]()~`>#+-=|{}.!])'
    return re.sub(reserved_chars, r'\\\1', text)

async def tarot(update: Update, context: CallbackContext) -> None:
    """–í—ã—Ç—è–≥–∏–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –¢–∞—Ä–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é."""
    chat_id = update.effective_chat.id
    logger.info(f"üîÆ tarot() –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    processing_message = None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    if context.user_data.get("processing", False):
        logger.warning(f"‚ö†Ô∏è –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ tarot –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        await update.message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        return

    context.user_data["processing"] = True
    logger.debug(f"–§–ª–∞–≥ processing —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ True –¥–ª—è {chat_id}")

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ
        processing_message = await send_processing_message(update, escape_markdown_v2("üé¥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—à—É –∫–∞—Ä—Ç—É –¢–∞—Ä–æ..."), context)
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {chat_id}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ
        card = None
        interpretation = None
        for attempt in range(2):
            try:
                logger.info(f"üé¥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ... (–ü–æ–ø—ã—Ç–∫–∞ {attempt+1})")
                card, interpretation = await asyncio.wait_for(
                    asyncio.to_thread(get_tarot_interpretation), timeout=15
                )
                logger.info(f"üé¥ –í—ã—Ç—è–Ω—É—Ç–∞ –∫–∞—Ä—Ç–∞: {card}")
                break
            except asyncio.TimeoutError:
                logger.warning(f"‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è get_tarot_interpretation() –∏—Å—Ç–µ–∫–ª–æ (–ü–æ–ø—ã—Ç–∫–∞ {attempt+1})")
                if attempt == 1:
                    error_message = escape_markdown_v2("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥.")
                    await replace_processing_message(context, processing_message, error_message, parse_mode="MarkdownV2")
                    return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ get_tarot_interpretation (–ü–æ–ø—ã—Ç–∫–∞ {attempt+1}): {e}")
                if attempt == 1:
                    raise  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—à–∏–±–∫—É –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_url = None
        try:
            logger.info("üì∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            image_url = await asyncio.wait_for(
                asyncio.to_thread(generate_tarot_image, card), timeout=10
            )
            logger.info("üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ" if image_url else "üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        except asyncio.TimeoutError:
            logger.warning("‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è generate_tarot_image() –∏—Å—Ç–µ–∫–ª–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ generate_tarot_image: {e}")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        save_tarot_reading(chat_id, card, interpretation)
        logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: –∫–∞—Ä—Ç–∞={card}")

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        card_escaped = escape_markdown_v2(card)
        interpretation_escaped = escape_markdown_v2(interpretation)
        formatted_text = f"üé¥ *–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¢–∞—Ä–æ: {card_escaped}*\n\n{interpretation_escaped}"
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π —Ç–µ–∫—Å—Ç: {formatted_text[:500]}...")

        # –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–Ω–æ–ø–∫–∏
        keyboard = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if image_url:
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            await context.bot.send_photo(chat_id=chat_id, photo=image_url)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–æ–π...")
        await replace_processing_message(context, processing_message, formatted_text, reply_markup, parse_mode="MarkdownV2")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ tarot(): {e}")
        error_message = escape_markdown_v2("‚ö†Ô∏è –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        if processing_message:
            await replace_processing_message(context, processing_message, error_message, parse_mode="MarkdownV2")
        else:
            await update.message.reply_text(error_message, parse_mode="MarkdownV2")

    finally:
        context.user_data["processing"] = False
        logger.info(f"‚úÖ tarot() –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} —Å —Ñ–ª–∞–≥–æ–º processing={context.user_data.get('processing')}")
        await asyncio.sleep(1)
