from telegram import Update, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from services.tarot_service import get_tarot_interpretation
from keyboards.inline_buttons import tarot_keyboard, tarot_carousel_keyboard
from services.database import save_tarot_reading, get_tarot_history

tarot_index = 0  # –ò–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã –≤ –∫–∞—Ä—É—Å–µ–ª–∏

async def tarot(update: Update, context: CallbackContext) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –∫–∞—Ä—Ç –¢–∞—Ä–æ"""
    await update.message.reply_text(
        "üé¥ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¢–∞—Ä–æ –∏–ª–∏ –ø—Ä–æ–ª–∏—Å—Ç–∞–π—Ç–µ –∫–∞—Ä—É—Å–µ–ª—å:*",
        reply_markup=tarot_carousel_keyboard,  # ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        parse_mode="Markdown"
    )

async def tarot_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –¢–∞—Ä–æ"""
    global tarot_index
    query = update.callback_query
    await query.answer()

    if query.data == "draw_tarot":
        tarot_text = get_tarot_interpretation()  # ‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã–∑–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        save_tarot_reading(query.message.chat_id, "–°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∞", tarot_text)  # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–∞–¥–∞–Ω–∏–µ
        
        # –í–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await query.message.reply_text(f"üé¥ *–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¢–∞—Ä–æ:*\n\n{tarot_text}",
                                       parse_mode="Markdown",
                                       reply_markup=tarot_keyboard)  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é

    elif query.data == "prev_tarot":
        tarot_index = (tarot_index - 1) % len(context.user_data.get("tarot_deck", []))
    elif query.data == "next_tarot":
        tarot_index = (tarot_index + 1) % len(context.user_data.get("tarot_deck", []))

    tarot_card = context.user_data.get("tarot_deck", [])[tarot_index]
    await query.message.reply_text(f"üé¥ *–ö–∞—Ä—Ç–∞ –¢–∞—Ä–æ:* {tarot_card}",
                                   reply_markup=tarot_carousel_keyboard,  # ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                                   parse_mode="Markdown")

async def tarot_history(update: Update, context: CallbackContext) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –≥–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    history = get_tarot_history(update.message.chat_id)
    
    if not history:
        await update.message.reply_text("üìú –ò—Å—Ç–æ—Ä–∏—è –≥–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç–∞!")
        return

    text = "üìú *–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –≥–∞–¥–∞–Ω–∏–π:*\n"
    for card, interpretation, timestamp in history:
        text += f"üé¥ {card} ({timestamp}):\n_{interpretation}_\n\n"

    await update.message.reply_text(text, parse_mode="Markdown")
