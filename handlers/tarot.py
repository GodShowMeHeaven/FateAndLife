from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from services.tarot_service import get_tarot_interpretation, generate_tarot_image
from services.database import save_tarot_reading
from utils.button_guard import button_guard  # ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
import logging
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@button_guard
async def tarot(update: Update, context: CallbackContext) -> None:
    """–í—ã—Ç—è–≥–∏–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –¢–∞—Ä–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–ø–∞–º–∞"""
    query = update.callback_query

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ callback_query (–∫–Ω–æ–ø–∫–∞) –∏–ª–∏ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    if query:
        await query.answer()
    else:
        logger.info("–í—ã–∑–æ–≤ –¢–∞—Ä–æ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    context.user_data["processing"] = True  # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    try:
        logger.info("–í—ã—Ç—è–≥–∏–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –¢–∞—Ä–æ...")
        card, interpretation = get_tarot_interpretation()  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É –∏ –µ—ë –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
        image_url = generate_tarot_image(card)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–∞–¥–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        save_tarot_reading(update.effective_user.id, card, interpretation)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("üîÑ –í—ã—Ç—è–Ω—É—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É", callback_data="draw_tarot")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        chat_id = update.effective_chat.id  # ‚úÖ –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º chat_id

        # –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–¥–∞–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
        if image_url:
            await context.bot.send_photo(chat_id=chat_id, photo=image_url)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"üé¥ *–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¢–∞—Ä–æ: {card}*\n\n{interpretation}",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ: {e}")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

    finally:
        await asyncio.sleep(2)  # ‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
        context.user_data["processing"] = False  # ‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

@button_guard
async def tarot_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–í—ã—Ç—è–Ω—É—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É'"""
    query = update.callback_query
    if query:
        await query.answer()
        if query.data == "draw_tarot":
            logger.info("–ö–Ω–æ–ø–∫–∞ 'üîÑ –í—ã—Ç—è–Ω—É—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É' –Ω–∞–∂–∞—Ç–∞.")
            await tarot(update, context)
