import logging
from telegram import Update
from telegram.ext import ContextTypes
from services.tarot_service import get_tarot_interpretation, generate_tarot_image
from utils.loading_messages import send_processing_message, replace_processing_message
from utils.telegram_helpers import send_photo_with_caption
from utils.validation import sanitize_input, truncate_text

logger = logging.getLogger(__name__)

async def tarot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /tarot –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–∫–ª–∞–¥ –∫–∞—Ä—Ç –¢–∞—Ä–æ."""
    chat_id = update.effective_chat.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ")

    processing_message = None
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        processing_message = await send_processing_message(
            update,
            sanitize_input("üîÆ –í—ã—Ç—è–≥–∏–≤–∞–µ–º –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ..."),
            parse_mode="MarkdownV2"
        )

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏ –µ—ë –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
        card, tarot_reading = await get_tarot_interpretation()
        logger.debug(f"–ö–∞—Ä—Ç–∞: {card}, –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: {tarot_reading[:50]}...")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        raw_caption = f"üé¥ –ö–∞—Ä—Ç–∞: {card}\n\n{tarot_reading}"
        logger.debug(f"–ò—Å—Ö–æ–¥–Ω–∞—è –ø–æ–¥–ø–∏—Å—å: {raw_caption[:100]}...")

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        caption = sanitize_input(raw_caption)
        logger.debug(f"–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å: {caption[:100]}...")

        # –û–±—Ä–µ–∑–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–æ –ª–∏–º–∏—Ç–∞ Telegram (1024 —Å–∏–º–≤–æ–ª–∞)
        caption = truncate_text(caption, max_length=1024)
        logger.debug(f"–û–±—Ä–µ–∑–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å: {caption[:100]}...")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
        image_url = generate_tarot_image(card)
        if not image_url:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
        await send_photo_with_caption(
            context.bot,
            chat_id,
            image_url,
            caption,
            parse_mode="MarkdownV2"
        )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await replace_processing_message(
            context,
            processing_message,
            sanitize_input("‚úÖ –†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ –≥–æ—Ç–æ–≤!"),
            parse_mode="MarkdownV2"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ: {e}")
        error_message = sanitize_input(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {error_message}")
        if processing_message:
            await replace_processing_message(
                context,
                processing_message,
                error_message,
                parse_mode="MarkdownV2"
            )
        else:
            await context.bot.send_message(
                chat_id,
                error_message,
                parse_mode="MarkdownV2"
            )