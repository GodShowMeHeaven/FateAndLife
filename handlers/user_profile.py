from telegram import Update
from telegram.ext import ContextTypes
from telegram.helpers import escape_markdown  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from services.user_profile import save_user_profile, get_user_profile
from utils.validation import validate_date, validate_time
from keyboards.main_menu import main_menu_keyboard
import logging

logger = logging.getLogger(__name__)

async def set_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.effective_chat:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ effective_chat –≤ update")
        return
    if not context.args or len(context.args) < 4:
        await update.message.reply_text(
            escape_markdown("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ: –∏–º—è –¥–∞—Ç–∞_—Ä–æ–∂–¥–µ–Ω–∏—è –≤—Ä–µ–º—è_—Ä–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–æ_—Ä–æ–∂–¥–µ–Ω–∏—è", version=2),
            parse_mode="MarkdownV2"
        )
        return

    name, birth_date, birth_time, birth_place = context.args[:4]
    if not validate_date(birth_date) or not validate_time(birth_time):
        await update.message.reply_text(
            escape_markdown("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ (–ß–ß:–ú–ú).", version=2),
            parse_mode="MarkdownV2"
        )
        return

    try:
        await save_user_profile(update.effective_chat.id, name, birth_date, birth_time, birth_place)
        await update.message.reply_text(
            escape_markdown(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {name}, {birth_date}, {birth_time}, {birth_place}", version=2),
            parse_mode="MarkdownV2",
            reply_markup=main_menu_keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await update.message.reply_text(
            escape_markdown("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", version=2),
            parse_mode="MarkdownV2",
            reply_markup=main_menu_keyboard
        )

async def get_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.effective_chat:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ effective_chat –≤ update")
        return
    try:
        profile = await get_user_profile(update.effective_chat.id)
        if profile:
            name, birth_date, birth_time, birth_place = profile
            await update.message.reply_text(
                escape_markdown(f"üìã –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–ò–º—è: {name}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}\n–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_time}\n–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_place}", version=2),
                parse_mode="MarkdownV2",
                reply_markup=main_menu_keyboard
            )
        else:
            await update.message.reply_text(
                escape_markdown("‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile", version=2),
                parse_mode="MarkdownV2",
                reply_markup=main_menu_keyboard
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await update.message.reply_text(
            escape_markdown("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", version=2),
            parse_mode="MarkdownV2",
            reply_markup=main_menu_keyboard
        )