import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from telegram.ext import Application
from services.database import get_subscriptions
from services.horoscope_service import get_horoscope
from telegram import Bot

logger = logging.getLogger(__name__)

async def send_daily_horoscopes(app: Application) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    bot = app.bot
    try:
        subscriptions = await get_subscriptions()
        for chat_id, zodiac in subscriptions:
            try:
                horoscope = await get_horoscope(zodiac, "today")
                await bot.send_message(chat_id, f"üåü –ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {zodiac} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{horoscope}")
                logger.debug(f"–ì–æ—Ä–æ—Å–∫–æ–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} –¥–ª—è –∑–Ω–∞–∫–∞ {zodiac}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e}")

async def schedule_daily_messages(app: Application) -> None:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π."""
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        send_daily_horoscopes,
        trigger=CronTrigger(hour=8, minute=0),
        args=[app],
        misfire_grace_time=300
    )
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")