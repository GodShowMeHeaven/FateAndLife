import openai
import config
import random
import os
import logging
# –ü–æ–¥–∫–ª—é—á–∞–µ–º OpenAI API-–∫–ª—é—á
openai.api_key = config.OPENAI_API_KEY
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
# –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –¢–∞—Ä–æ
tarot_cards = [
    "–®—É—Ç", "–ú–∞–≥", "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä",
    "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç", "–í–ª—é–±–ª–µ–Ω–Ω—ã–µ", "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å", "–û—Ç—à–µ–ª—å–Ω–∏–∫",
    "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã", "–°–∏–ª–∞", "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π", "–°–º–µ—Ä—Ç—å", "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
    "–î—å—è–≤–æ–ª", "–ë–∞—à–Ω—è", "–ó–≤–µ–∑–¥–∞", "–õ—É–Ω–∞", "–°–æ–ª–Ω—Ü–µ", "–°—É–¥", "–ú–∏—Ä"
]

async def get_tarot_interpretation() -> str:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É OpenAI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ."""
    card = random.choice(tarot_cards)
    prompt = (
        f"–í—ã—Ç–∞—â–∏ –∫–∞—Ä—Ç—É –¢–∞—Ä–æ: {card}. –û–±—ä—è—Å–Ω–∏ –µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Å—É–¥—å–±—ã, –ª—é–±–≤–∏, –∫–∞—Ä—å–µ—Ä—ã –∏ –¥—É—Ö–æ–≤–Ω–æ–≥–æ –ø—É—Ç–∏."
    )
    interpretation = await ask_openai(prompt)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º await
    return f"üé¥ **–í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¢–∞—Ä–æ: {card}**\n\n{interpretation}"

async def ask_openai(prompt: str) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏.
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat/completions –≤–º–µ—Å—Ç–æ completions
        response = await openai.chat.completions.create(  # ‚úÖ –ù–æ–≤—ã–π –º–µ—Ç–æ–¥!
            model="gpt-3.5-turbo",  # –£–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç-–º–æ–¥–µ–ª—å
            messages=[{"role": "user", "content": prompt}],  # ‚úÖ –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API
            max_tokens=150,
            temperature=0.7,
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"
async def get_natal_chart(name: str, birth_date: str, birth_time: str, birth_place: str) -> str:
    """–ó–∞–ø—Ä–æ—Å –∫ OpenAI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã."""
    prompt = (
        f"–°–æ–∑–¥–∞–π —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è {name}. "
        f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}, –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_time}, –ú–µ—Å—Ç–æ: {birth_place}. "
        "–û–ø–∏—à–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, —Å–∫—Ä—ã—Ç—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è —Å—É–¥—å–±—ã."
    )
    return await ask_openai(prompt)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º await
