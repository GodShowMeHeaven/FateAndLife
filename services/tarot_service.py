import random
import re
from openai import OpenAI
from services.openai_service import ask_openai
import config
import logging
import asyncio

logger = logging.getLogger(__name__)

client = OpenAI(api_key=config.OPENAI_API_KEY)

tarot_cards = [
    "–®—É—Ç", "–ú–∞–≥", "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä",
    "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç", "–í–ª—é–±–ª–µ–Ω–Ω—ã–µ", "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å", "–û—Ç—à–µ–ª—å–Ω–∏–∫",
    "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã", "–°–∏–ª–∞", "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π", "–°–º–µ—Ä—Ç—å", "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
    "–î—å—è–≤–æ–ª", "–ë–∞—à–Ω—è", "–ó–≤–µ–∑–¥–∞", "–õ—É–Ω–∞", "–°–æ–ª–Ω—Ü–µ", "–°—É–¥", "–ú–∏—Ä"
]

async def get_tarot_interpretation():
    card = random.choice(tarot_cards)
    prompt = (
        f"–¢—ã ‚Äî –¥—Ä–µ–≤–Ω–∏–π –º–∏—Å—Ç–∏–∫ –∫–∞—Ä—Ç –¢–∞—Ä–æ. –í —Å–≤–µ—Ç–µ —Å–≤–µ—á–µ–π —Ç–≤–æ–∏ —Ä—É–∫–∏ –∫–∞—Å–∞—é—Ç—Å—è –∫–æ–ª–æ–¥—ã, –∏ —Å–∏–ª—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –∫–∞—Ä—Ç—É: {card}. "
        f"–†–∞—Å–∫—Ä–æ–π –≥–ª—É–±–∏–Ω–Ω—ã–π —Å–º—ã—Å–ª –≤ —á–µ—Ç—ã—Ä—ë—Ö —Å—Ñ–µ—Ä–∞—Ö: "
        f"üåü –°—É–¥—å–±–∞ ‚Äî –∫–∞–∫–∏–µ –Ω–∏—Ç–∏ –ú–æ–π—Ä —Å–ø–ª–µ—Ç–∞—é—Ç—Å—è? –ö–∞–∫–∏–µ –∑–Ω–∞–∫–∏ –∏ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–∫–∏ –Ω–µ—Å—ë—Ç –∫–∞—Ä—Ç–∞? "
        f"–î–æ–±–∞–≤—å –ø—Ä–æ—Ä–æ—á–µ—Å–∫–æ–µ –≤–∏–¥–µ–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ. "
        f"üåü –õ—é–±–æ–≤—å ‚Äî –∫–∞–∫ —ç–Ω–µ—Ä–≥–∏–∏ –≤–ª–∏—è—é—Ç –Ω–∞ —Å–µ—Ä–¥–µ—á–Ω—É—é —á–∞–∫—Ä—É –∏ —Å–≤—è–∑–∏? –ö–∞–∫–∏–µ –∂–µ–ª–∞–Ω–∏—è –ø—Ä–æ–±—É–∂–¥–∞—é—Ç—Å—è? "
        f"üåü –í–ª–∞—Å—Ç—å –∏ –£—Å–ø–µ—Ö ‚Äî –∫–∞–∫–∏–µ –≤—Ä–∞—Ç–∞ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –¥–ª—è —Ä–æ—Å—Ç–∞? –ö–∞–∫–∏–µ —Ç–∞–ª–∞–Ω—Ç—ã –¥—Ä–µ–º–ª—é—Ç –≤ –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–∏? "
        f"üåü –î—É—Ö ‚Äî –∫–∞–∫–∏–µ —ç–Ω–µ—Ä–≥–æ—Ü–µ–Ω—Ç—Ä—ã –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è? –ö–∞–∫–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —É—Å–∏–ª—è—Ç —Å–≤—è–∑—å —Å –≤—ã—Å—à–∏–º–∏ —Å–∏–ª–∞–º–∏? "
        f"–î–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã –¥–∞–π –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –∫–∞–∫ –¥—Ä–µ–≤–Ω–µ–µ –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ. "
        f"üîÆ –í –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å–∫—Ä–æ–π —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–µ —Ç–∞–π–Ω—ã –∫–∞—Ä—Ç—ã ‚Äî —Å–≤—è–∑—å —Å –ø–ª–∞–Ω–µ—Ç–∞–º–∏, —Å—Ç–∏—Ö–∏—è–º–∏, "
        f"–∫—Ä–∏—Å—Ç–∞–ª–ª–∞–º–∏, –º–∞—Å–ª–∞–º–∏, –ª—É–Ω–Ω—ã–º–∏ —Ñ–∞–∑–∞–º–∏. –£–ø–æ–º—è–Ω–∏ —Å–≤—è—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ä—É–Ω—ã. "
        f"–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏: üåü –ø–µ—Ä–µ–¥ —Å—Ñ–µ—Ä–∞–º–∏, üí° –ø–µ—Ä–µ–¥ —Å–æ–≤–µ—Ç–∞–º–∏, üîÆ –ø–µ—Ä–µ–¥ —ç–∑–æ—Ç–µ—Ä–∏–∫–æ–π. "
        f"–ü–∏—à–∏ –ø–æ—ç—Ç–∏—á–Ω–æ, –æ–±—Ä–∞–∑–Ω–æ, –∫–∞–∫ –¥—Ä–µ–≤–Ω–∏–µ –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–∞. "
        f"–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ###, **, *, # –∏ —Ç.–¥.)."
        f"–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–õ–û–ñ–ò –°–í–û–ô –û–¢–í–ï–¢ –í 960 —Å–∏–º–≤–æ–ª–æ–≤!"
    )
    interpretation = await ask_openai(prompt)
    return card, interpretation

async def generate_tarot_image(card: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ —Å –ø–æ–º–æ—â—å—é DALL-E."""
    prompt = f"–ú–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ '{card}' –≤ —Å—Ç–∏–ª–µ –¥—Ä–µ–≤–Ω–∏—Ö —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–∞–¥–∏—Ü–∏–π, —Å –±–æ–≥–∞—Ç–æ–π —Å–∏–º–≤–æ–ª–∏–∫–æ–π, –≥–ª—É–±–æ–∫–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –∏ –º–∞–≥–∏—á–µ—Å–∫–æ–π –∞—É—Ä–æ–π."
    try:
        response = await asyncio.to_thread(
            client.images.generate,
            model="dall-e-3",
            prompt=prompt,
            n=1,
            size="1024x1024"
        )
        if not response.data or not response.data[0].url:
            raise Exception("DALL-E –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        image_url = response.data[0].url
        logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_url}")
        return image_url
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return ""