import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackContext, ConversationHandler
from telegram_bot_calendar import WMonthTelegramCalendar
import json
from datetime import date, datetime
import calendar
import re

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_INPUT_METHOD, WAITING_FOR_MANUAL_DATE, WAITING_FOR_YEAR, WAITING_FOR_MONTH, WAITING_FOR_DAY = range(5)

async def start_calendar(update: Update, context: CallbackContext) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã: –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏–ª–∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥."""
    try:
        chat_id = update.effective_chat.id
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞
        keyboard = [
            [InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ", callback_data="calendar_select")],
            [InlineKeyboardButton("‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é", callback_data="manual_input")],
            [InlineKeyboardButton("üìÜ –ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä –≥–æ–¥–∞", callback_data="year_select")]
        ]
        
        await context.bot.send_message(
            chat_id=chat_id,
            text="–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        logger.info(f"üì± –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        
        return CHOOSING_INPUT_METHOD
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã: {e}")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END

async def choose_input_method(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã."""
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id
    
    choice = query.data
    
    if choice == "calendar_select":
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        calendar_obj = WMonthTelegramCalendar(locale="ru")
        await query.edit_message_text(
            text="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=calendar_obj.build()[0]
        )
        return ConversationHandler.END  # –ü—Ä–æ–¥–æ–ª–∂–∏–º —á–µ—Ä–µ–∑ handle_calendar
    
    elif choice == "manual_input":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞—Ç—ã
        await query.edit_message_text(
            text="‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 04.04.1990):"
        )
        return WAITING_FOR_MANUAL_DATE
    
    elif choice == "year_select":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞
        years = generate_year_buttons()
        await query.edit_message_text(
            text="üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:",
            reply_markup=InlineKeyboardMarkup(years)
        )
        return WAITING_FOR_YEAR

async def handle_manual_date_input(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞—Ç—ã."""
    text = update.message.text
    chat_id = update.effective_chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–î–î.–ú–ú.–ì–ì–ì–ì)
    date_pattern = re.compile(r'^(\d{1,2})\.(\d{1,2})\.(\d{4})$')
    match = date_pattern.match(text)
    
    if match:
        day, month, year = map(int, match.groups())
        try:
            selected_date = date(year, month, day)
            formatted_date = selected_date.strftime("%d.%m.%Y")
            context.user_data["selected_date"] = formatted_date
            
            await update.message.reply_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {formatted_date}")
            
            # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            await process_selected_date(update, context, formatted_date)
            return ConversationHandler.END
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
            )
            return WAITING_FOR_MANUAL_DATE
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 04.04.1990):"
        )
        return WAITING_FOR_MANUAL_DATE

def generate_year_buttons():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞."""
    current_year = datetime.now().year
    years = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö 4 –ª–µ—Ç
    recent_years = [[
        InlineKeyboardButton(f"{year}", callback_data=f"year_{year}")
        for year in range(current_year-4, current_year+1)
    ]]
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Å—è—Ç–∏–ª–µ—Ç–∏–π
    decades = []
    for decade in range(1920, current_year, 10):
        if len(decades) == 3:  # –ú–∞–∫—Å–∏–º—É–º 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
            years.append(decades)
            decades = []
        decades.append(InlineKeyboardButton(f"{decade}-–µ", callback_data=f"decade_{decade}"))
    
    if decades:  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø–æ–ª–Ω—ã–π —Ä—è–¥, –µ—Å–ª–∏ –µ—Å—Ç—å
        years.append(decades)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–µ–¥–∞–≤–Ω–∏–º–∏ –≥–æ–¥–∞–º–∏ –≤ –Ω–∞—á–∞–ª–æ
    return recent_years + years

async def handle_year_selection(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ–¥–∞."""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data.startswith("year_"):
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥–æ–¥
        year = int(data.split("_")[1])
        context.user_data["selected_year"] = year
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Å—è—Ü—ã
        months = generate_month_buttons()
        await query.edit_message_text(
            text=f"üìÜ –í—ã–±—Ä–∞–Ω –≥–æ–¥: {year}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
            reply_markup=InlineKeyboardMarkup(months)
        )
        return WAITING_FOR_MONTH
        
    elif data.startswith("decade_"):
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –¥–µ—Å—è—Ç–∏–ª–µ—Ç–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ–¥—ã —ç—Ç–æ–≥–æ –¥–µ—Å—è—Ç–∏–ª–µ—Ç–∏—è
        decade = int(data.split("_")[1])
        years = []
        for i in range(0, 10, 2):
            row = []
            for j in range(2):
                if i + j < 10:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–µ—Å—è—Ç–∏–ª–µ—Ç–∏—è
                    year = decade + i + j
                    row.append(InlineKeyboardButton(f"{year}", callback_data=f"year_{year}"))
            years.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        years.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_decades")])
        
        await query.edit_message_text(
            text=f"üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –∏–∑ {decade}-—Ö:",
            reply_markup=InlineKeyboardMarkup(years)
        )
        return WAITING_FOR_YEAR

def generate_month_buttons():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞."""
    months = []
    # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
    month_names = [
        "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
        "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
    ]
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –º–µ—Å—è—Ü–∞ –≤ —Ä—è–¥—É
    for i in range(0, 12, 3):
        row = []
        for j in range(3):
            if i + j < 12:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
                month_num = i + j + 1  # +1 –ø–æ—Ç–æ–º—É —á—Ç–æ –º–µ—Å—è—Ü—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 1
                row.append(InlineKeyboardButton(month_names[i+j], callback_data=f"month_{month_num}"))
        months.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    months.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_years")])
    
    return months

async def handle_month_selection(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞."""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "back_to_years":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –≥–æ–¥–∞
        years = generate_year_buttons()
        await query.edit_message_text(
            text="üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:",
            reply_markup=InlineKeyboardMarkup(years)
        )
        return WAITING_FOR_YEAR
    
    if data.startswith("month_"):
        month = int(data.split("_")[1])
        context.user_data["selected_month"] = month
        year = context.user_data["selected_year"]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
        days_in_month = calendar.monthrange(year, month)[1]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–Ω–µ–π
        day_buttons = generate_day_buttons(days_in_month)
        
        # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
        month_names = [
            "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
            "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
        ]
        
        await query.edit_message_text(
            text=f"üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å {month_names[month-1]} {year} –≥–æ–¥–∞:",
            reply_markup=InlineKeyboardMarkup(day_buttons)
        )
        return WAITING_FOR_DAY

def generate_day_buttons(days_in_month):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è."""
    day_buttons = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 7 –¥–Ω–µ–π –≤ —Ä—è–¥—É (–∫–∞–∫ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ)
    for i in range(0, days_in_month, 7):
        row = []
        for j in range(7):
            if i + j < days_in_month:
                day = i + j + 1
                row.append(InlineKeyboardButton(f"{day}", callback_data=f"day_{day}"))
        day_buttons.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    day_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_months")])
    
    return day_buttons

async def handle_day_selection(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–Ω—è."""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "back_to_months":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—è—Ü–∞
        months = generate_month_buttons()
        await query.edit_message_text(
            text=f"üìÜ –í—ã–±—Ä–∞–Ω –≥–æ–¥: {context.user_data['selected_year']}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
            reply_markup=InlineKeyboardMarkup(months)
        )
        return WAITING_FOR_MONTH
    
    if data.startswith("day_"):
        day = int(data.split("_")[1])
        year = context.user_data["selected_year"]
        month = context.user_data["selected_month"]
        
        try:
            selected_date = date(year, month, day)
            formatted_date = selected_date.strftime("%d.%m.%Y")
            context.user_data["selected_date"] = formatted_date
            
            await query.edit_message_text(text=f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {formatted_date}")
            
            # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            await process_selected_date(update, context, formatted_date)
            return ConversationHandler.END
            
        except ValueError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞—Ç—ã: {e}")
            await query.edit_message_text(
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return ConversationHandler.END

async def process_selected_date(update: Update, context: CallbackContext, formatted_date: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫."""
    try:
        # –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞—Ç—ã –≤ –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        if context.user_data.get("awaiting_numerology"):
            from handlers.numerology import process_numerology
            await process_numerology(update, context, formatted_date)
        elif context.user_data.get("awaiting_natal_chart"):
            from handlers.natal_chart import natal_chart
            await natal_chart(update, context)
        elif context.user_data.get("awaiting_compatibility"):
            from handlers.compatibility import compatibility_natal
            await compatibility_natal(update, context)
    finally:
        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        context.user_data.pop("awaiting_numerology", None)
        context.user_data.pop("awaiting_natal_chart", None)
        context.user_data.pop("awaiting_compatibility", None)

async def handle_calendar(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –≤ inline-–∫–∞–ª–µ–Ω–¥–∞—Ä–µ."""
    query = update.callback_query
    if not query:
        logger.warning("‚ö†Ô∏è –í—ã–∑–≤–∞–Ω handle_calendar –±–µ–∑ callback_query")
        return

    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω callback –¥–∞–Ω–Ω—ã–µ: {query.data}")
    await query.answer()

    # –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞
    if query.data == "back_to_input_method":
        return await start_calendar(update, context)

    chat_id = update.effective_chat.id
    calendar_obj = WMonthTelegramCalendar(locale="ru")

    try:
        selected, keyboard_json, step = calendar_obj.process(query.data)
        logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {selected}, {step}")

        if selected:
            # –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞
            formatted_date = selected.strftime("%d.%m.%Y")
            context.user_data["selected_date"] = formatted_date

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                if query.message:
                    await query.edit_message_text(text=f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {formatted_date}")
                else:
                    await context.bot.send_message(chat_id, text=f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {formatted_date}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                await context.bot.send_message(chat_id, text=f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {formatted_date}")

            # –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞—Ç—ã –≤ –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            await process_selected_date(update, context, formatted_date)
        else:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            keyboard = InlineKeyboardMarkup.from_dict(json.loads(keyboard_json)) if isinstance(keyboard_json, str) else keyboard_json
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é" –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é
            keyboard_dict = keyboard.to_dict()
            keyboard_dict["inline_keyboard"].append([{"text": "‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", "callback_data": "manual_input"}])
            
            try:
                if query.message:
                    await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup.from_dict(keyboard_dict))
                else:
                    await context.bot.send_message(chat_id, text="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=InlineKeyboardMarkup.from_dict(keyboard_dict))
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e}")
                await context.bot.send_message(chat_id, text="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=InlineKeyboardMarkup.from_dict(keyboard_dict))

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {str(e)}")
        try:
            if query.message:
                await query.edit_message_text(
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=calendar_obj.build()[0]
                )
            else:
                await context.bot.send_message(
                    chat_id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=calendar_obj.build()[0]
                )
        except Exception as e2:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e2}")
            await context.bot.send_message(
                chat_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ."
            )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ConversationHandler –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
def get_calendar_conversation_handler():
    from telegram.ext import CallbackQueryHandler, MessageHandler, filters
    
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(choose_input_method, pattern=r'^(calendar_select|manual_input|year_select)$')],
        states={
            WAITING_FOR_MANUAL_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_manual_date_input)],
            WAITING_FOR_YEAR: [CallbackQueryHandler(handle_year_selection, pattern=r'^(year_|decade_|back_to_decades).*')],
            WAITING_FOR_MONTH: [CallbackQueryHandler(handle_month_selection, pattern=r'^(month_|back_to_years).*')],
            WAITING_FOR_DAY: [CallbackQueryHandler(handle_day_selection, pattern=r'^(day_|back_to_months).*')],
        },
        fallbacks=[],
        name="calendar_conversation",
        persistent=False
    )