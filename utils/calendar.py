from telegram import Update, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from telegram_bot_calendar import DetailedTelegramCalendar
import logging
from datetime import date
import json

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
class CustomCalendar(DetailedTelegramCalendar):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        
        # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
        self.months = {
            1: '–Ø–Ω–≤', 2: '–§–µ–≤', 3: '–ú–∞—Ä—Ç', 4: '–ê–ø—Ä',
            5: '–ú–∞–π', 6: '–ò—é–Ω—å', 7: '–ò—é–ª—å', 8: '–ê–≤–≥',
            9: '–°–µ–Ω', 10: '–û–∫—Ç', 11: '–ù–æ—è', 12: '–î–µ–∫'
        }
        
        # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        self.days_of_week = {
            0: '–ü–Ω', 1: '–í—Ç', 2: '–°—Ä',
            3: '–ß—Ç', 4: '–ü—Ç', 5: '–°–±', 6: '–í—Å'
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä—è–¥–∫–∞ –≤—ã–±–æ—Ä–∞
        self.LSTEP = {
            'y': '–≥–æ–¥',
            'm': '–º–µ—Å—è—Ü',
            'd': '–¥–µ–Ω—å'
        }

async def start_calendar(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—à–∞–≥–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã."""
    try:
        chat_id = update.effective_chat.id
        
        calendar = CustomCalendar(
            min_date=date(1900, 1, 1),
            max_date=date.today(),
            locale="ru"
        )
        await context.bot.send_message(
            chat_id=chat_id,
            text="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:",
            reply_markup=calendar.build()
        )
        logger.info(f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def handle_calendar(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—à–∞–≥–æ–≤—ã–π –≤—ã–±–æ—Ä –¥–∞—Ç—ã."""
    query = update.callback_query
    if not query:
        return
    
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω callback –¥–∞–Ω–Ω—ã–µ: {query.data}")
    await query.answer()

    try:
        calendar = CustomCalendar(
            min_date=date(1900, 1, 1),
            max_date=date.today(),
            locale="ru"
        )
        result, keyboard, step = calendar.process(query.data)
        
        if not result and keyboard:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∞–≥–∞
            if step == 'y':
                text = "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:"
            elif step == 'm':
                text = "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:"
            else:
                text = "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:"
                
            await query.edit_message_text(
                text=text,
                reply_markup=keyboard
            )
        elif result:
            # –î–∞—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–±—Ä–∞–Ω–∞
            formatted_date = result.strftime("%d.%m.%Y")
            context.user_data["selected_date"] = formatted_date
            await query.edit_message_text(
                text=f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {formatted_date}"
            )
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:"
            )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {str(e)}")
        try:
            await query.edit_message_text(
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ.",
                reply_markup=calendar.build()
            )
        except Exception as e2:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {str(e2)}")
            await query.edit_message_text(
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ."
            )