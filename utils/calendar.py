import logging
from telegram import Update, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from telegram_bot_calendar import WMonthTelegramCalendar
import json
from datetime import date

logger = logging.getLogger(__name__)

async def start_calendar(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç inline-–∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã."""
    try:
        chat_id = update.effective_chat.id
        calendar = WMonthTelegramCalendar(locale="ru")
        await context.bot.send_message(
            chat_id=chat_id,
            text="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=calendar.build()[0]
        )
        logger.info(f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def handle_calendar(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –≤ inline-–∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –µ—ë –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫."""
    query = update.callback_query
    if not query:
        logger.warning("‚ö†Ô∏è –í—ã–∑–≤–∞–Ω handle_calendar –±–µ–∑ callback_query")
        return

    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω callback –¥–∞–Ω–Ω—ã–µ: {query.data}")
    await query.answer()

    chat_id = update.effective_chat.id
    calendar = WMonthTelegramCalendar(locale="ru")

    try:
        selected, keyboard_json, step = calendar.process(query.data)
        logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {selected}, {step}")

        if selected:
            # –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞
            formatted_date = selected.strftime("%d.%m.%Y")
            context.user_data["selected_date"] = formatted_date

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                if query.message:
                    await query.edit_message_text(text=f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {formatted_date}")
                else:
                    await context.bot.send_message(chat_id, text=f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {formatted_date}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                await context.bot.send_message(chat_id, text=f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {formatted_date}")

            # –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞—Ç—ã –≤ –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            try:
                if context.user_data.get("awaiting_numerology"):
                    from handlers.numerology import process_numerology
                    await process_numerology(update, context, formatted_date)
                elif context.user_data.get("awaiting_natal_chart"):
                    from handlers.natal_chart import natal_chart
                    # –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å Update –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    await natal_chart(update, context)
                elif context.user_data.get("awaiting_compatibility"):
                    from handlers.compatibility import compatibility_natal
                    await compatibility_natal(update, context)
            finally:
                # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                context.user_data.pop("awaiting_numerology", None)
                context.user_data.pop("awaiting_natal_chart", None)
                context.user_data.pop("awaiting_compatibility", None)
        else:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            keyboard = InlineKeyboardMarkup.from_dict(json.loads(keyboard_json)) if isinstance(keyboard_json, str) else keyboard_json
            try:
                if query.message:
                    await query.edit_message_reply_markup(reply_markup=keyboard)
                else:
                    await context.bot.send_message(chat_id, text="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=keyboard)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e}")
                await context.bot.send_message(chat_id, text="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {str(e)}")
        try:
            if query.message:
                await query.edit_message_text(
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=calendar.build()[0]
                )
            else:
                await context.bot.send_message(
                    chat_id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=calendar.build()[0]
                )
        except Exception as e2:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e2}")
            await context.bot.send_message(
                chat_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ."
            )