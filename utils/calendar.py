import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from telegram_bot_calendar import WMonthTelegramCalendar
import json
from datetime import datetime, date

logger = logging.getLogger(__name__)

# –î–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
MIN_YEAR = 1900
MAX_YEAR = 2100

async def start_calendar(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç inline-–∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –≥–æ–¥–∞ –∏ –º–µ—Å—è—Ü–∞."""
    try:
        chat_id = update.effective_chat.id
        current_year = datetime.now().year

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞
        year_buttons = []
        for year in range(current_year - 20, current_year + 21, 10):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 41 –≥–æ–¥ (5 –≥—Ä—É–ø–ø –ø–æ 10 –ª–µ—Ç)
            if MIN_YEAR <= year <= MAX_YEAR:
                year_buttons.append(
                    InlineKeyboardButton(str(year), callback_data=f"year_{year}")
                )
        year_keyboard = [year_buttons[i:i + 3] for i in range(0, len(year_buttons), 3)]  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
        year_keyboard.append([
            InlineKeyboardButton("<< –ù–∞–∑–∞–¥ 10 –ª–µ—Ç", callback_data="year_back_10"),
            InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ 10 –ª–µ—Ç >>", callback_data="year_forward_10")
        ])
        year_keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_calendar")])

        await context.bot.send_message(
            chat_id=chat_id,
            text="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:",
            reply_markup=InlineKeyboardMarkup(year_keyboard)
        )
        context.user_data["calendar_step"] = "year"
        logger.info(f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: –Ω–∞—á–∞—Ç –≤—ã–±–æ—Ä –≥–æ–¥–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def handle_calendar(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã, –≥–æ–¥–∞ –∏–ª–∏ –º–µ—Å—è—Ü–∞ –≤ inline-–∫–∞–ª–µ–Ω–¥–∞—Ä–µ."""
    query = update.callback_query
    if not query:
        logger.warning("‚ö†Ô∏è –í—ã–∑–≤–∞–Ω handle_calendar –±–µ–∑ callback_query")
        return

    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω callback –¥–∞–Ω–Ω—ã–µ: {query.data}")
    await query.answer()

    chat_id = update.effective_chat.id
    calendar_step = context.user_data.get("calendar_step", "year")

    try:
        if calendar_step == "year":
            if query.data.startswith("year_"):
                year = int(query.data.replace("year_", ""))
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
                month_buttons = []
                for month in range(1, 13):
                    month_name = datetime(2000, month, 1).strftime("%B")  # –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
                    month_buttons.append(
                        InlineKeyboardButton(month_name, callback_data=f"month_{month}_{year}")
                    )
                month_keyboard = [month_buttons[i:i + 3] for i in range(0, len(month_buttons), 3)]  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
                month_keyboard.append([
                    InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_year"),
                    InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_calendar")
                ])

                await query.edit_message_text(
                    text="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
                    reply_markup=InlineKeyboardMarkup(month_keyboard)
                )
                context.user_data["calendar_step"] = "month"
                logger.info(f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: –Ω–∞—á–∞—Ç –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –¥–ª—è –≥–æ–¥–∞ {year} –≤ —á–∞—Ç–µ {chat_id}")
            elif query.data == "year_back_10":
                current_year = context.user_data.get("current_year", datetime.now().year)
                new_year = max(MIN_YEAR, current_year - 10)
                context.user_data["current_year"] = new_year
                await show_year_selection(update, context)
            elif query.data == "year_forward_10":
                current_year = context.user_data.get("current_year", datetime.now().year)
                new_year = min(MAX_YEAR, current_year + 10)
                context.user_data["current_year"] = new_year
                await show_year_selection(update, context)
            elif query.data == "cancel_calendar":
                await query.edit_message_text(
                    text="üìÖ –í—ã–±–æ—Ä –¥–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω.",
                    reply_markup=None
                )
                context.user_data.pop("calendar_step", None)
                context.user_data.pop("current_year", None)
                logger.info(f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: –≤—ã–±–æ—Ä –¥–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                return
        elif calendar_step == "month":
            if query.data.startswith("month_"):
                month, year = map(int, query.data.replace("month_", "").split("_"))
                calendar = WMonthTelegramCalendar(locale="ru", min_date=date(MIN_YEAR, 1, 1), max_date=date(MAX_YEAR, 12, 31))
                keyboard = calendar.build()[0]
                await query.edit_message_text(
                    text="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:",
                    reply_markup=keyboard
                )
                context.user_data["calendar_step"] = "day"
                context.user_data["selected_month"] = month
                context.user_data["selected_year"] = year
                logger.info(f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: –Ω–∞—á–∞—Ç –≤—ã–±–æ—Ä –¥–Ω—è –¥–ª—è {month}/{year} –≤ —á–∞—Ç–µ {chat_id}")
            elif query.data == "back_to_year":
                await start_calendar(update, context)
                context.user_data.pop("calendar_step", None)
            elif query.data == "cancel_calendar":
                await query.edit_message_text(
                    text="üìÖ –í—ã–±–æ—Ä –¥–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω.",
                    reply_markup=None
                )
                context.user_data.pop("calendar_step", None)
                context.user_data.pop("selected_month", None)
                context.user_data.pop("selected_year", None)
                logger.info(f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: –≤—ã–±–æ—Ä –¥–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                return
        elif calendar_step == "day":
            calendar = WMonthTelegramCalendar(locale="ru", min_date=date(MIN_YEAR, 1, 1), max_date=date(MAX_YEAR, 12, 31))
            selected, keyboard_json, step = calendar.process(query.data)
            logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {selected}, {step}")

            if selected:
                # –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞
                formatted_date = selected.strftime("%d.%m.%Y")
                context.user_data["selected_date"] = formatted_date

                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                try:
                    if query.message:
                        await query.edit_message_text(text=f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {formatted_date}")
                    else:
                        await context.bot.send_message(chat_id, text=f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {formatted_date}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                    await context.bot.send_message(chat_id, text=f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {formatted_date}")

                # –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞—Ç—ã –≤ –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                try:
                    if context.user_data.get("awaiting_numerology"):
                        from handlers.numerology import process_numerology
                        await process_numerology(update, context, formatted_date)
                    elif context.user_data.get("awaiting_natal_chart"):
                        from handlers.natal_chart import natal_chart
                        # –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å Update –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        await natal_chart(update, context)
                    elif context.user_data.get("awaiting_compatibility"):
                        from handlers.compatibility import compatibility_natal
                        await compatibility_natal(update, context)
                finally:
                    # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    context.user_data.pop("awaiting_numerology", None)
                    context.user_data.pop("awaiting_natal_chart", None)
                    context.user_data.pop("awaiting_compatibility", None)
                    context.user_data.pop("calendar_step", None)
                    context.user_data.pop("selected_month", None)
                    context.user_data.pop("selected_year", None)
            else:
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å
                keyboard = InlineKeyboardMarkup.from_dict(json.loads(keyboard_json)) if isinstance(keyboard_json, str) else keyboard_json
                try:
                    if query.message:
                        await query.edit_message_reply_markup(reply_markup=keyboard)
                    else:
                        await context.bot.send_message(chat_id, text="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=keyboard)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e}")
                    await context.bot.send_message(chat_id, text="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {str(e)}")
        try:
            if query.message:
                await query.edit_message_text(
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=WMonthTelegramCalendar(locale="ru", min_date=date(MIN_YEAR, 1, 1), max_date=date(MAX_YEAR, 12, 31)).build()[0]
                )
            else:
                await context.bot.send_message(
                    chat_id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=WMonthTelegramCalendar(locale="ru", min_date=date(MIN_YEAR, 1, 1), max_date=date(MAX_YEAR, 12, 31)).build()[0]
                )
        except Exception as e2:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e2}")
            await context.bot.send_message(
                chat_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ."
            )

async def show_year_selection(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞ —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."""
    chat_id = update.effective_chat.id
    current_year = context.user_data.get("current_year", datetime.now().year)

    year_buttons = []
    for year in range(max(MIN_YEAR, current_year - 20), min(MAX_YEAR + 1, current_year + 21), 10):
        year_buttons.append(
            InlineKeyboardButton(str(year), callback_data=f"year_{year}")
        )
    year_keyboard = [year_buttons[i:i + 3] for i in range(0, len(year_buttons), 3)]  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    year_keyboard.append([
        InlineKeyboardButton("<< –ù–∞–∑–∞–¥ 10 –ª–µ—Ç", callback_data="year_back_10"),
        InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ 10 –ª–µ—Ç >>", callback_data="year_forward_10")
    ])
    year_keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_calendar")])

    query = update.callback_query
    await query.edit_message_text(
        text="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:",
        reply_markup=InlineKeyboardMarkup(year_keyboard)
    )
    context.user_data["calendar_step"] = "year"
    logger.info(f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å: –æ–±–Ω–æ–≤–ª–µ–Ω –≤—ã–±–æ—Ä –≥–æ–¥–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")