from telegram import Update
from telegram.ext import CallbackContext
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP
import logging
from datetime import date

logger = logging.getLogger(__name__)

async def start_calendar(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é inline-–∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã."""
    chat_id = update.effective_chat.id

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
    min_date = date(1900, 1, 1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
    max_date = date.today()  # –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞

    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    calendar = DetailedTelegramCalendar(min_date=min_date, max_date=max_date, locale="ru")
    keyboard, step = calendar.build()

    logger.info(f"üìÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –®–∞–≥: {LSTEP.get(step, '–≥–æ–¥')}")  # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É

    await context.bot.send_message(chat_id, f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ {LSTEP.get(step, '–≥–æ–¥')}:", reply_markup=keyboard)

async def handle_calendar(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –≤ inline-–∫–∞–ª–µ–Ω–¥–∞—Ä–µ."""
    query = update.callback_query
    chat_id = query.message.chat_id

    if not query.data:
        logger.error("‚ùå –û—à–∏–±–∫–∞: query.data –ø—É—Å—Ç–æ–π!")
        return

    logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω callback: {query.data}")  # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º callback_data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ callback –¥–∞–Ω–Ω—ã–º –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    if not query.data.startswith("calendar"):
        logger.warning(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π callback: {query.data}")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å —Ç–µ–º –∂–µ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞—Ç
    calendar = DetailedTelegramCalendar(min_date=date(1900, 1, 1), max_date=date.today(), locale="ru")

    try:
        result, key, step = calendar.process(query.data)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        return

    if not result and key:
        step_text = LSTEP.get(step, "–¥–∞—Ç—É")  # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–∞
        logger.info(f"üìÖ –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ù–æ–≤—ã–π —à–∞–≥: {step_text}")  # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

        await query.message.edit_text(f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ {step_text}:", reply_markup=key)
    elif result:
        formatted_date = result.strftime("%d.%m.%Y")  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        logger.info(f"‚úÖ –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {formatted_date}")  # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –¥–∞—Ç—ã

        await query.message.edit_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {formatted_date}")
        context.user_data["selected_date"] = formatted_date  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ user_data

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Ä–µ–º—è)
        await context.bot.send_message(chat_id, "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
